/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. pinguLangCompiler.jj */
/*@egen*//**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = true;
  JAVA_UNICODE_ESCAPE = true;
  UNICODE_INPUT = true;
}

PARSER_BEGIN(pingulangCompiler)
package source;
import recovery.*;
public class pingulangCompiler/*@bgen(jjtree)*/implements pingulangCompilerTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected static JJTpingulangCompilerState jjtree = new JJTpingulangCompilerState();

/*@egen*/
  public static void main(String args[]) throws ParseException {
    pingulangCompiler parser = new pingulangCompiler(System.in);
    
    while (true)
    {
      System.out.println("Lendo codigo");
      System.out.print("digite :");
      try
      {
        SimpleNode n = pingulangCompiler.Programa();
        n.dump("");
        //parser.Programa();
        //System.out.println("Analise concluida com sucesso! Programa valido.");
      }
      catch (ParseException e)
      {
            System.err.println("Erro de sintaxe:");
            System.err.println(e.getMessage());
      }
      catch (TokenMgrError e)
      {
            System.err.println("Erro l\u00e9xico:");
            System.err.println(e.getMessage());
      }
  }
}
 static public String im(int x)
  {
    int k;
	String s;
    s = tokenImage[x];
    k = s.lastIndexOf("\"");
    try {
      s = s.substring(1,k);
    }
   catch (StringIndexOutOfBoundsException e)
	   {}
   return s;
  }
	
  static Token lastError = null;
  static boolean eof;    // vari\u00e1vel que indica se EOF foi alcan\u00e7ado
	
  // o m\u00e9todo abaixo consome tokens at\u00e9 alcan\u00e7ar um que perten\u00e7a ao conjunto
  // de sincroniza\u00e7\u00e3o
  static void consumeUntil(RecoverySet g,
	                 ParseException e,
	                 String met) throws ParseEOFException,
	                                    ParseException
  {
	Token tok;
	System.out.println();
	System.out.println("*** " + met + " ***");
	System.out.println("     Conjunto de sincroniza\u00e7\u00e3o: " + g);
		
	if (g == null) throw e; // se o conjunto \u00e9 null, propaga a exce\u00e7\u00e3o
	
	tok = getToken(1); // pega token corrente
	while ( ! eof )	{ // se n\u00e3o chegou ao fim do arquivo
	  if ( g.contains(tok.kind)) {//achou um token no conjunto
	    System.out.println("     Encontrado token de sincroniza\u00e7\u00e3o: " + 
	                       im(tok.kind));
	    break;
	  }
	  System.out.println("     Ignorando o token: " + im(tok.kind));
	  getNextToken();     // pega pr\u00f3ximo token       
      tok = getToken(1);
	  if (tok.kind == EOF && ! g.contains(EOF) ) // fim da entrada?   
	      eof = true;
	}
    if ( tok != lastError)  {
	  System.out.println(e.getMessage());
	  lastError = tok;
	   
	}
	if ( eof )
	  throw new ParseEOFException("Encontrei EOF onde n\u00e3o deveria.");
  }
}

PARSER_END(pingulangCompiler)

SKIP : {
    < " " | "\t" | "\n" | "\r" >
  | < "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n") >
  | < "/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/" >
}


/* TOKENS PRINCIPAIS */
TOKEN : {
    < INICIO_PROGRAMA: "E LA VAMOS NOS" >
  | < FIM_PROGRAMA: "ISSO EH TUDO P-PESSOAL" >
  | < INICIO_BLOCO: "{" >
  | < FIM_BLOCO: "}" >
  | < PINGU: "PINGU" >
}

/* TIPOS DE DADOS */
TOKEN : {
    < INT_TYPE: "IO" >
  | < FLOAT_TYPE: "FLORZINHA" >
  | < BOOL_TYPE: "SID" >
  | < CHAR_TYPE: "PENELOPE CHARMOSA" >
  | < TRUE: "A GENTE VAI VIVER" >
  | < FALSE: "A GENTE VAI MORRER" >
}

/* ESTRUTURAS DE CONTROLE*/
TOKEN : {
    < IF: "SERIA" >
  | < ELSE: "OU SERA QUE NAO" >
  | < WHILE: "A EH REPETE" >
  | < FOR: "FORCA G" >
  | < DO: "YABBA DABBA DOO" >
}

/* FUN\u00c7\u00d5ES E OPERADORES */
TOKEN : {
    < PRINT: "MOSTLA" >
  | < INPUT: "ESCLEVE" >
  | < OP_RELACIONAL: "==" | "!=" | ">" | "<" | ">=" | "<=" >
  | < OP_LOGICO: "&&" | "||" >
  | < OP_ARITMETICO: "+" | "-" | "*" | "/" | "%" >
  | < OP_IGUAL: "=" >
  | < OP_AUMENTO: "+=" >
  | < OP_DIMINUI: "-=" >
  | < OP_MULTIPLICA: "*=" >
  | < OP_DIVIDE: "/=" >
}

/* LITERAIS E IDENTIFICADORES */
TOKEN : {
    < INTEIRO: (["0"-"9"])+ >
  | < FLOAT: (["0"-"9"])+ "." (["0"-"9"])+ >
  | < CHAR: "'" (~["'","\\"] | "\\" ["n","t","b","r","f","\\","'","\""]) "'" >
  | < STRING: "\"" (~["\"","\\"] | "\\" ["n","t","b","r","f","\\","'","\""])* "\"" >
  | < ID: ["a"-"z"] (["a"-"z","A"-"Z","0"-"9","_"])* >
}

/* REGRAS GRAMATICAIS */
SimpleNode Programa() :
{/*@bgen(jjtree) Programa */
 SimpleNode jjtn000 = new SimpleNode(JJTPROGRAMA);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet g = Follow.Programa;}
{/*@bgen(jjtree) Programa */
  try {
/*@egen*/
  try {
    Inicio()
    ( Declaracao() )*
    ( Comando() )*
    Fim()
    {
	return jjtn000;
    }
      } catch(ParseException e) {
         consumeUntil(g,e,"Programa");
         }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
    
}

void Declaracao() :
{/*@bgen(jjtree) Declaracao */
 SimpleNode jjtn000 = new SimpleNode(JJTDECLARACAO);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet g = Follow.Declaracao;}
{/*@bgen(jjtree) Declaracao */
  try {
/*@egen*/
  try {
    (
      TipoInt() | TipoFloat() | TipoBool() | TipoChar()
    )
    ListaVariaveis()
    FimLinha()
      } catch (ParseException e) {
         consumeUntil(g,e,"Declaracao");
         }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ListaVariaveis() :
{/*@bgen(jjtree) ListaVariaveis */
 SimpleNode jjtn000 = new SimpleNode(JJTLISTAVARIAVEIS);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet g = Follow.ListaVariaveis;}
{/*@bgen(jjtree) ListaVariaveis */
   try {
/*@egen*/
   try { 
    Identificador() ( ( Igual() | Aumento() | Diminui() | Multiplica() | Divide() ) Expressao() )?
    ( "," Identificador() ( ( Igual() | Aumento() | Diminui() | Multiplica() | Divide() ) Expressao() )? )*
    } catch (ParseException e) {
         consumeUntil(g,e,"ListaVariaveis");
         }/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}


void Variavel() :
{/*@bgen(jjtree) Variavel */
 SimpleNode jjtn000 = new SimpleNode(JJTVARIAVEL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet g = Follow.Variavel;}
{/*@bgen(jjtree) Variavel */
  try {
/*@egen*/
  try { 
    Identificador()
    (
        ( Igual() | Aumento() | Diminui() | Multiplica() | Divide() )
        Expressao()
    )?
  } catch (ParseException e) {
         consumeUntil(g,e,"Variavel");
         }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


/* REGRAS DE COMANDOS */
void Comando() :
{/*@bgen(jjtree) Comando */
 SimpleNode jjtn000 = new SimpleNode(JJTCOMANDO);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet g = Follow.Comando;}
{/*@bgen(jjtree) Comando */
  try {
/*@egen*/
  try { 
    Condicional()
    |
    Repeticao()
    |
    Atribuicao()  FimLinha()
    |
    EntradaSaida() FimLinha()
    |
    Bloco()
  } catch (ParseException e) {
         consumeUntil(g,e,"Comando");
         }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/* ATRIBUI\u00c7\u00d5ES */
void Atribuicao() :
{/*@bgen(jjtree) Atribuicao */
 SimpleNode jjtn000 = new SimpleNode(JJTATRIBUICAO);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet g = Follow.Atribuicao;}
{/*@bgen(jjtree) Atribuicao */
  try {
/*@egen*/
  try { 
    Identificador() 
    (
        Igual() Expressao()
        |
        ( Aumento() | Diminui() | Multiplica() | Divide() ) Expressao()
    )
  } catch (ParseException e) {
         consumeUntil(g,e,"Atribuicao");
         }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/* ESTRUTURAS CONDICIONAIS */
void Condicional() :
{/*@bgen(jjtree) Condicional */
 SimpleNode jjtn000 = new SimpleNode(JJTCONDICIONAL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet g = Follow.Condicional;}
{/*@bgen(jjtree) Condicional */
  try {
/*@egen*/
  try { 
    If() "(" Expressao() ")" Comando()
    [ Else() Comando() ]
  } catch (ParseException e) {
         consumeUntil(g,e,"Condicional");
         }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/* ESTRUTURAS DE REPETI\u00c7\u00c3O */
void Repeticao() :
{/*@bgen(jjtree) Repeticao */
 SimpleNode jjtn000 = new SimpleNode(JJTREPETICAO);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet g = Follow.Repeticao;}
{/*@bgen(jjtree) Repeticao */
  try {
/*@egen*/ try { 
    While() | For() | DoWhile()
  } catch (ParseException e) {
         consumeUntil(g,e,"Repeticao");
         }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void While() :
{/*@bgen(jjtree) While */
 SimpleNode jjtn000 = new SimpleNode(JJTWHILE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet g = Follow.While;}
{/*@bgen(jjtree) While */
  try {
/*@egen*/
  try { 
    While_Token() "(" Expressao() ")" Comando()
  } catch (ParseException e) {
         consumeUntil(g,e,"While");
         }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void For() :
{/*@bgen(jjtree) For */
 SimpleNode jjtn000 = new SimpleNode(JJTFOR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet g = Follow.For;}
{/*@bgen(jjtree) For */
  try {
/*@egen*/
  try { 
    For_Token() "("
      Atribuicao()
    "," Expressao()
    "," Atribuicao()
    ")" Comando()
  } catch (ParseException e) {
         consumeUntil(g,e,"For");
         }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void DoWhile() :
{/*@bgen(jjtree) DoWhile */
 SimpleNode jjtn000 = new SimpleNode(JJTDOWHILE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet g = Follow.DoWhile;}
{/*@bgen(jjtree) DoWhile */
  try {
/*@egen*/
  try { 
    Do() Comando() While() "(" Expressao() ")" FimLinha()
  } catch (ParseException e) {
         consumeUntil(g,e,"DoWhile");
         }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/* ENTRADA/SA\u00cdDA */
void EntradaSaida() :
{/*@bgen(jjtree) EntradaSaida */
 SimpleNode jjtn000 = new SimpleNode(JJTENTRADASAIDA);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet g = Follow.EntradaSaida;}
{/*@bgen(jjtree) EntradaSaida */
  try {
/*@egen*/
  try { 
    Print() "(" Expressao() ")" 
    | Input() "(" Identificador() ")"
  } catch (ParseException e) {
         consumeUntil(g,e,"EntradaSaida");
         }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/* BLOCOS */
void Bloco() :
{/*@bgen(jjtree) Bloco */
 SimpleNode jjtn000 = new SimpleNode(JJTBLOCO);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet g = Follow.Bloco;}
{/*@bgen(jjtree) Bloco */
  try {
/*@egen*/
  try { 
    InicioBloco() ( Comando() )* FimBloco()
  } catch (ParseException e) {
         consumeUntil(g,e,"Bloco");
         }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/* EXPRESS\u00d5ES */
void Expressao() :
{/*@bgen(jjtree) Expressao */
 SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSAO);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet g = Follow.Expressao;}
{/*@bgen(jjtree) Expressao */
  try {
/*@egen*/
  try { 
    ExpressaoLogica()
  } catch (ParseException e) {
         consumeUntil(g,e,"Expressao");
         }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ExpressaoLogica() :
{/*@bgen(jjtree) ExpressaoLogica */
 SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSAOLOGICA);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet g = Follow.ExpressaoLogica;}
{/*@bgen(jjtree) ExpressaoLogica */
  try {
/*@egen*/
  try { 
    ExpressaoRelacional() ( OperadorLogico() ExpressaoRelacional() )*
  } catch (ParseException e) {
         consumeUntil(g,e,"ExpressaoLogica");
         }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ExpressaoRelacional() :
{/*@bgen(jjtree) ExpressaoRelacional */
 SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSAORELACIONAL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet g = Follow.ExpressaoRelacional;}
{/*@bgen(jjtree) ExpressaoRelacional */
  try {
/*@egen*/
  try { 
    ExpressaoAritmetica() ( OperadorRelacional() ExpressaoAritmetica() )*
  } catch (ParseException e) {
         consumeUntil(g,e,"ExpressaoRelacional");
         }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ExpressaoAritmetica() :
{/*@bgen(jjtree) ExpressaoAritmetica */
 SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSAOARITMETICA);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet g = Follow.ExpressaoAritmetica;}
{/*@bgen(jjtree) ExpressaoAritmetica */
  try {
/*@egen*/
  try { 
    Termo() ( OperadorAritmetico() Termo() )*
  } catch (ParseException e) {
         consumeUntil(g,e,"ExpressaoAritmetica");
         }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Termo() :
{/*@bgen(jjtree) Termo */
 SimpleNode jjtn000 = new SimpleNode(JJTTERMO);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet g = Follow.Termo;}
{/*@bgen(jjtree) Termo */
  try {
/*@egen*/
  try { 
    Fator() ( OperadorAritmetico() Fator() )*
  } catch (ParseException e) {
         consumeUntil(g,e,"Termo");
         }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Fator() :
{/*@bgen(jjtree) Fator */
 SimpleNode jjtn000 = new SimpleNode(JJTFATOR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet g = Follow.Fator;}
{/*@bgen(jjtree) Fator */
  try {
/*@egen*/
  try { 
    Identificador()
  | <INTEIRO>
  | <FLOAT>
  | <TRUE>
  | <FALSE>
  | <CHAR>
  | <STRING>
  | "(" Expressao() ")"
  | "!" Fator()
} catch (ParseException e) {
         consumeUntil(g,e,"Fator");
         }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}

/* TERMINAIS */

//inicio e fim
void Inicio():
{/*@bgen(jjtree) Inicio */
  SimpleNode jjtn000 = new SimpleNode(JJTINICIO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Inicio */
  try {
/*@egen*/
  <INICIO_PROGRAMA>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Fim():
{/*@bgen(jjtree) Fim */
  SimpleNode jjtn000 = new SimpleNode(JJTFIM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Fim */
  try {
/*@egen*/
  <FIM_PROGRAMA>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

//ID
void Identificador():
{/*@bgen(jjtree) Identificador */
  SimpleNode jjtn000 = new SimpleNode(JJTIDENTIFICADOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Identificador */
  try {
/*@egen*/
  <ID>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

//bloco
void InicioBloco():
{/*@bgen(jjtree) InicioBloco */
  SimpleNode jjtn000 = new SimpleNode(JJTINICIOBLOCO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) InicioBloco */
  try {
/*@egen*/
  <INICIO_BLOCO>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void FimBloco():
{/*@bgen(jjtree) FimBloco */
  SimpleNode jjtn000 = new SimpleNode(JJTFIMBLOCO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FimBloco */
  try {
/*@egen*/
  <FIM_BLOCO>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

//variaveis
void TipoInt():
{/*@bgen(jjtree) TipoInt */
  SimpleNode jjtn000 = new SimpleNode(JJTTIPOINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TipoInt */
  try {
/*@egen*/
  <INT_TYPE>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void TipoFloat():
{/*@bgen(jjtree) TipoFloat */
  SimpleNode jjtn000 = new SimpleNode(JJTTIPOFLOAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TipoFloat */
  try {
/*@egen*/
  <FLOAT_TYPE>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void TipoBool():
{/*@bgen(jjtree) TipoBool */
  SimpleNode jjtn000 = new SimpleNode(JJTTIPOBOOL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TipoBool */
  try {
/*@egen*/
  <BOOL_TYPE>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void TipoChar():
{/*@bgen(jjtree) TipoChar */
  SimpleNode jjtn000 = new SimpleNode(JJTTIPOCHAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TipoChar */
  try {
/*@egen*/
  <CHAR_TYPE>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

//operacoes
void Igual():
{/*@bgen(jjtree) Igual */
  SimpleNode jjtn000 = new SimpleNode(JJTIGUAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Igual */
  try {
/*@egen*/
  <OP_IGUAL>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Aumento():
{/*@bgen(jjtree) Aumento */
  SimpleNode jjtn000 = new SimpleNode(JJTAUMENTO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Aumento */
  try {
/*@egen*/
  <OP_AUMENTO>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Diminui():
{/*@bgen(jjtree) Diminui */
  SimpleNode jjtn000 = new SimpleNode(JJTDIMINUI);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Diminui */
  try {
/*@egen*/
  <OP_DIMINUI>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Multiplica():
{/*@bgen(jjtree) Multiplica */
  SimpleNode jjtn000 = new SimpleNode(JJTMULTIPLICA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Multiplica */
  try {
/*@egen*/
  <OP_MULTIPLICA>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Divide():
{/*@bgen(jjtree) Divide */
  SimpleNode jjtn000 = new SimpleNode(JJTDIVIDE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Divide */
  try {
/*@egen*/
  <OP_DIVIDE>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void OperadorAritmetico():
{/*@bgen(jjtree) OperadorAritmetico */
  SimpleNode jjtn000 = new SimpleNode(JJTOPERADORARITMETICO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) OperadorAritmetico */
  try {
/*@egen*/
  <OP_ARITMETICO>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void OperadorLogico():
{/*@bgen(jjtree) OperadorLogico */
  SimpleNode jjtn000 = new SimpleNode(JJTOPERADORLOGICO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) OperadorLogico */
  try {
/*@egen*/
  <OP_LOGICO>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void OperadorRelacional():
{/*@bgen(jjtree) OperadorRelacional */
  SimpleNode jjtn000 = new SimpleNode(JJTOPERADORRELACIONAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) OperadorRelacional */
  try {
/*@egen*/
  <OP_RELACIONAL>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

//funcoes
void If():
{/*@bgen(jjtree) If */
  SimpleNode jjtn000 = new SimpleNode(JJTIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) If */
  try {
/*@egen*/
  <IF>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Else():
{/*@bgen(jjtree) Else */
  SimpleNode jjtn000 = new SimpleNode(JJTELSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Else */
  try {
/*@egen*/
  <ELSE>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Do():
{/*@bgen(jjtree) Do */
  SimpleNode jjtn000 = new SimpleNode(JJTDO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Do */
  try {
/*@egen*/
  <DO>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void While_Token():
{/*@bgen(jjtree) While_Token */
  SimpleNode jjtn000 = new SimpleNode(JJTWHILE_TOKEN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) While_Token */
  try {
/*@egen*/
  <WHILE>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void For_Token():
{/*@bgen(jjtree) For_Token */
  SimpleNode jjtn000 = new SimpleNode(JJTFOR_TOKEN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) For_Token */
  try {
/*@egen*/
  <FOR>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

//console
void Print():
{/*@bgen(jjtree) Print */
  SimpleNode jjtn000 = new SimpleNode(JJTPRINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Print */
  try {
/*@egen*/
  <PRINT>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Input():
{/*@bgen(jjtree) Input */
  SimpleNode jjtn000 = new SimpleNode(JJTINPUT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Input */
  try {
/*@egen*/
  <INPUT>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

//fim de linha
void FimLinha():
{/*@bgen(jjtree) FimLinha */
  SimpleNode jjtn000 = new SimpleNode(JJTFIMLINHA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FimLinha */
  try {
/*@egen*/
  <PINGU>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}