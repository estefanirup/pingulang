/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = true;
}

PARSER_BEGIN(pingulangCompiler)
package source;

public class pingulangCompiler
{
  public static void main(String args[]) throws ParseException {
    pingulangCompiler parser = new pingulangCompiler(System.in);
    try {
        parser.Programa();
        System.out.println("Analise concluda com sucesso! Programa valido.");
    } catch (ParseException e) {
        System.out.println("Erro na linha " + e.currentToken.beginLine + ", coluna " + e.currentToken.beginColumn);
        System.out.println("Token inesperado: " + e.currentToken.image);
        System.out.println("Mensagem: " + e.getMessage());
    }
}
}

PARSER_END(pingulangCompiler)

SKIP : {
    < " " | "\t" | "\n" | "\r" >
  | < "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n") >
  | < "/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/" >
}


/* TOKENS PRINCIPAIS */
TOKEN : {
    < INICIO_PROGRAMA: "E LA VAMOS NOS" >
  | < FIM_PROGRAMA: "ISSO EH TUDO P-PESSOAL" >
  | < INICIO_BLOCO: "{" >
  | < FIM_BLOCO: "}" >
  | < PINGU: "PINGU" >
}

/* TIPOS DE DADOS */
TOKEN : {
    < INT_TYPE: "IO" >
  | < FLOAT_TYPE: "FLORZINHA" >
  | < BOOL_TYPE: "SID" >
  | < CHAR_TYPE: "PENELOPE CHARMOSA" >
  | < TRUE: "A GENTE VAI VIVER" >
  | < FALSE: "A GENTE VAI MORRER" >
}

/* ESTRUTURAS DE CONTROLE*/
TOKEN : {
    < IF: "SERIA" >
  | < ELSE: "OU SERA QUE NAO" >
  | < WHILE: "A EH REPETE" >
  | < FOR: "FORCA G" >
  | < DO: "YABBA DABBA DOO" >
}

/* FUNÇÕES E OPERADORES */
TOKEN : {
    < PRINT: "MOSTLA" >
  | < INPUT: "ESCLEVE" >
  | < OP_RELACIONAL: "==" | "!=" | ">" | "<" | ">=" | "<=" >
  | < OP_LOGICO: "&&" | "||" >
  | < OP_ARITMETICO: "+" | "-" | "*" | "/" | "%" >
  | < OP_IGUAL: "=" >
  | < OP_AUMENTO: "+=" >
  | < OP_DIMINUI: "-=" >
  | < OP_MULTIPLICA: "*=" >
  | < OP_DIVIDE: "/=" >
}

/* LITERAIS E IDENTIFICADORES */
TOKEN : {
    < INTEIRO: (["0"-"9"])+ >
  | < FLOAT: (["0"-"9"])+ "." (["0"-"9"])+ >
  | < CHAR: "'" (~["'","\\"] | "\\" ["n","t","b","r","f","\\","'","\""]) "'" >
  | < STRING: "\"" (~["\"","\\"] | "\\" ["n","t","b","r","f","\\","'","\""])* "\"" >
  | < ID: ["a"-"z"] (["a"-"z","A"-"Z","0"-"9","_"])* >
}

/* REGRAS GRAMATICAIS */
void Programa() :
{}
{
    <INICIO_PROGRAMA>
    Declaracoes()
    Comandos()
    <FIM_PROGRAMA>
}

void Declaracoes() :
{}
{
    ( Declaracao() )*
}

void Declaracao() :
{}
{
    (
      <INT_TYPE> | <FLOAT_TYPE> | <BOOL_TYPE> | <CHAR_TYPE>
    )
    ListaVariaveis()
    <PINGU>
}

void DeclaracaoSemPingu() :
{}
{
    (
      <INT_TYPE> | <FLOAT_TYPE> | <BOOL_TYPE> | <CHAR_TYPE>
    )
    ListaVariaveis()
}

void ListaVariaveis() :
{}
{
    <ID> ( ( <OP_IGUAL> | <OP_AUMENTO> | <OP_DIMINUI> | <OP_MULTIPLICA> | <OP_DIVIDE> ) Expressao() )?
    ( "," <ID> ( ( <OP_IGUAL> | <OP_AUMENTO> | <OP_DIMINUI> | <OP_MULTIPLICA> | <OP_DIVIDE> ) Expressao() )? )*
}


void Variavel() :
{}
{
    <ID>
    (
        ( <OP_IGUAL> | <OP_AUMENTO> | <OP_DIMINUI> | <OP_MULTIPLICA> | <OP_DIVIDE> )
        Expressao()
    )?
}


/*Incertos*/

/* REGRAS DE COMANDOS */
void Comandos() :
{}
{
    ( Comando() )*
}

void Comando() :
{}
{
    LOOKAHEAD(2)
    Condicional()
    |
    Repeticao()
    |
    Atribuicao() <PINGU>
    |
    EntradaSaida() <PINGU>
    |
    Bloco()
}

/* ATRIBUIÇÕES */
void Atribuicao() :
{}
{
    <ID> ( <OP_IGUAL> | <OP_AUMENTO> | <OP_DIMINUI> | <OP_MULTIPLICA> | <OP_DIVIDE> ) Expressao()
}

/* ESTRUTURAS CONDICIONAIS */
void Condicional() :
{}
{
    <IF> "(" Expressao() ")" Comando()
    [ LOOKAHEAD(1) <ELSE> Comando() ]
}

/* ESTRUTURAS DE REPETIÇÃO */
void Repeticao() :
{}
{
    While() | For() | DoWhile()
}

void While() :
{}
{
    <WHILE> "(" Expressao() ")" Comando()
}

void For() :
{}
{
    <FOR> "("
    (
      LOOKAHEAD( <INT_TYPE> | <FLOAT_TYPE> | <BOOL_TYPE> | <CHAR_TYPE> )
      DeclaracaoSemPingu()
    |
      Atribuicao()
    )
    "," Expressao()
    "," Atribuicao()
    ")" Comando()
}

void DoWhile() :
{}
{
    <DO> Comando() <WHILE> "(" Expressao() ")" <PINGU>
}

/* ENTRADA/SAÍDA */
void EntradaSaida() :
{}
{
    <PRINT> "(" Expressao() ")" 
    | <INPUT> "(" <ID> ")"
}

/* BLOCOS */
void Bloco() :
{}
{
    <INICIO_BLOCO> Comandos() <FIM_BLOCO>
}

/* EXPRESSÕES */
void Expressao() :
{}
{
    ExpressaoLogica()
}

void ExpressaoLogica() :
{}
{
    ExpressaoRelacional() ( <OP_LOGICO> ExpressaoRelacional() )*
}

void ExpressaoRelacional() :
{}
{
    ExpressaoAritmetica() ( <OP_RELACIONAL> ExpressaoAritmetica() )*
}

void ExpressaoAritmetica() :
{}
{
    Termo() ( <OP_ARITMETICO> Termo() )*
}

void Termo() :
{}
{
    Fator() ( ("*" | "/" | "%") Fator() )*
}

void Fator() :
{}
{
    <ID>
  | <INTEIRO>
  | <FLOAT>
  | <TRUE>
  | <FALSE>
  | <CHAR>
  | <STRING>
  | "(" Expressao() ")"
  | "!" Fator()
}