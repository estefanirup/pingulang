/* pingulangCompiler.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. pingulangCompiler.java */
package source;
import recovery.*;
public class pingulangCompiler/*@bgen(jjtree)*/implements pingulangCompilerTreeConstants, pingulangCompilerConstants {/*@bgen(jjtree)*/
  protected static JJTpingulangCompilerState jjtree = new JJTpingulangCompilerState();public static void main(String args[]) throws ParseException {
    pingulangCompiler parser = new pingulangCompiler(System.in);

    while (true)
    {
      System.out.println("Reading from standard input...");
      System.out.print("digite :");
      try
      {
        SimpleNode n = pingulangCompiler.Programa();
        n.dump("");
        //parser.Programa();
        //System.out.println("Analise concluida com sucesso! Programa valido.");
      }
      catch (ParseException e)
      {
            System.err.println("Erro de sintaxe:");
            System.err.println(e.getMessage());
      }
      catch (TokenMgrError e)
      {
            System.err.println("Erro l\u00e9xico:");
            System.err.println(e.getMessage());
      }
  }
}
 static public String im(int x)
  {
    int k;
        String s;
    s = tokenImage[x];
    k = s.lastIndexOf("\"");
    try {
      s = s.substring(1,k);
    }
   catch (StringIndexOutOfBoundsException e)
           {}
   return s;
  }

  static Token lastError = null;
  static boolean eof;    // variável que indica se EOF foi alcançado

  // o método abaixo consome tokens até alcançar um que pertença ao conjunto
  // de sincronização
  static void consumeUntil(RecoverySet g,
                         ParseException e,
                         String met) throws ParseEOFException,
                                            ParseException
  {
        Token tok;
        System.out.println();
        System.out.println("*** " + met + " ***");
        System.out.println("     Conjunto de sincroniza\u00e7\u00e3o: " + g);

        if (g == null) throw e; // se o conjunto é null, propaga a exceção

        tok = getToken(1); // pega token corrente
        while ( ! eof ) { // se não chegou ao fim do arquivo
          if ( g.contains(tok.kind)) {//achou um token no conjunto
            System.out.println("     Encontrado token de sincroniza\u00e7\u00e3o: " +
                               im(tok.kind));
            break;
          }
          System.out.println("     Ignorando o token: " + im(tok.kind));
          getNextToken();     // pega próximo token       
      tok = getToken(1);
          if (tok.kind == EOF && ! g.contains(EOF) ) // fim da entrada?   
              eof = true;
        }
    if ( tok != lastError)  {
          System.out.println(e.getMessage());
          lastError = tok;

        }
        if ( eof )
          throw new ParseEOFException("Encontrei EOF onde n\u00e3o deveria.");
  }

/* REGRAS GRAMATICAIS */
  static final public SimpleNode Programa() throws ParseException {/*@bgen(jjtree) Programa */
 SimpleNode jjtn000 = new SimpleNode(JJTPROGRAMA);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet g = Follow.Programa;
    try {
      try {
        jj_consume_token(INICIO_PROGRAMA);
        label_1:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case INT_TYPE:
          case FLOAT_TYPE:
          case BOOL_TYPE:
          case CHAR_TYPE:{
            ;
            break;
            }
          default:
            jj_la1[0] = jj_gen;
            break label_1;
          }
          Declaracao();
        }
        label_2:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case INICIO_BLOCO:
          case IF:
          case WHILE:
          case FOR:
          case DO:
          case PRINT:
          case INPUT:
          case ID:{
            ;
            break;
            }
          default:
            jj_la1[1] = jj_gen;
            break label_2;
          }
          Comando();
        }
        jj_consume_token(FIM_PROGRAMA);
{if ("" != null) return jjtn000;}
      } catch (ParseException e) {
consumeUntil(g,e,"Programa");
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
}

//void identificador() : { }

//void inicioPrograma() : { }
  static final public 
void Declaracao() throws ParseException {/*@bgen(jjtree) Declaracao */
 SimpleNode jjtn000 = new SimpleNode(JJTDECLARACAO);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet g = Follow.Declaracao;
    try {
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INT_TYPE:{
          jj_consume_token(INT_TYPE);
          break;
          }
        case FLOAT_TYPE:{
          jj_consume_token(FLOAT_TYPE);
          break;
          }
        case BOOL_TYPE:{
          jj_consume_token(BOOL_TYPE);
          break;
          }
        case CHAR_TYPE:{
          jj_consume_token(CHAR_TYPE);
          break;
          }
        default:
          jj_la1[2] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        ListaVariaveis();
        jj_consume_token(PINGU);
      } catch (ParseException e) {
consumeUntil(g,e,"Declaracao");
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void ListaVariaveis() throws ParseException {/*@bgen(jjtree) ListaVariaveis */
 SimpleNode jjtn000 = new SimpleNode(JJTLISTAVARIAVEIS);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet g = Follow.ListaVariaveis;
    try {
      try {
        jj_consume_token(ID);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case OP_IGUAL:
        case OP_AUMENTO:
        case OP_DIMINUI:
        case OP_MULTIPLICA:
        case OP_DIVIDE:{
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case OP_IGUAL:{
            jj_consume_token(OP_IGUAL);
            break;
            }
          case OP_AUMENTO:{
            jj_consume_token(OP_AUMENTO);
            break;
            }
          case OP_DIMINUI:{
            jj_consume_token(OP_DIMINUI);
            break;
            }
          case OP_MULTIPLICA:{
            jj_consume_token(OP_MULTIPLICA);
            break;
            }
          case OP_DIVIDE:{
            jj_consume_token(OP_DIVIDE);
            break;
            }
          default:
            jj_la1[3] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          Expressao();
          break;
          }
        default:
          jj_la1[4] = jj_gen;
          ;
        }
        label_3:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 35:{
            ;
            break;
            }
          default:
            jj_la1[5] = jj_gen;
            break label_3;
          }
          jj_consume_token(35);
          jj_consume_token(ID);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case OP_IGUAL:
          case OP_AUMENTO:
          case OP_DIMINUI:
          case OP_MULTIPLICA:
          case OP_DIVIDE:{
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case OP_IGUAL:{
              jj_consume_token(OP_IGUAL);
              break;
              }
            case OP_AUMENTO:{
              jj_consume_token(OP_AUMENTO);
              break;
              }
            case OP_DIMINUI:{
              jj_consume_token(OP_DIMINUI);
              break;
              }
            case OP_MULTIPLICA:{
              jj_consume_token(OP_MULTIPLICA);
              break;
              }
            case OP_DIVIDE:{
              jj_consume_token(OP_DIVIDE);
              break;
              }
            default:
              jj_la1[6] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            Expressao();
            break;
            }
          default:
            jj_la1[7] = jj_gen;
            ;
          }
        }
      } catch (ParseException e) {
consumeUntil(g,e,"ListaVariaveis");
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
}

  static final public void Variavel() throws ParseException {/*@bgen(jjtree) Variavel */
 SimpleNode jjtn000 = new SimpleNode(JJTVARIAVEL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet g = Follow.Variavel;
    try {
      try {
        jj_consume_token(ID);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case OP_IGUAL:
        case OP_AUMENTO:
        case OP_DIMINUI:
        case OP_MULTIPLICA:
        case OP_DIVIDE:{
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case OP_IGUAL:{
            jj_consume_token(OP_IGUAL);
            break;
            }
          case OP_AUMENTO:{
            jj_consume_token(OP_AUMENTO);
            break;
            }
          case OP_DIMINUI:{
            jj_consume_token(OP_DIMINUI);
            break;
            }
          case OP_MULTIPLICA:{
            jj_consume_token(OP_MULTIPLICA);
            break;
            }
          case OP_DIVIDE:{
            jj_consume_token(OP_DIVIDE);
            break;
            }
          default:
            jj_la1[8] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          Expressao();
          break;
          }
        default:
          jj_la1[9] = jj_gen;
          ;
        }
      } catch (ParseException e) {
consumeUntil(g,e,"Variavel");
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

/* REGRAS DE COMANDOS */
  static final public void Comando() throws ParseException {/*@bgen(jjtree) Comando */
 SimpleNode jjtn000 = new SimpleNode(JJTCOMANDO);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet g = Follow.Comando;
    try {
      try {
        if (jj_2_1(2)) {
          Condicional();
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case WHILE:
          case FOR:
          case DO:{
            Repeticao();
            break;
            }
          case ID:{
            Atribuicao();
            jj_consume_token(PINGU);
            break;
            }
          case PRINT:
          case INPUT:{
            EntradaSaida();
            jj_consume_token(PINGU);
            break;
            }
          case INICIO_BLOCO:{
            Bloco();
            break;
            }
          default:
            jj_la1[10] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      } catch (ParseException e) {
consumeUntil(g,e,"Comando");
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

/* ATRIBUIÇÕES */
  static final public void Atribuicao() throws ParseException {/*@bgen(jjtree) Atribuicao */
 SimpleNode jjtn000 = new SimpleNode(JJTATRIBUICAO);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet g = Follow.Atribuicao;
    try {
      try {
        jj_consume_token(ID);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case OP_IGUAL:{
          jj_consume_token(OP_IGUAL);
          Expressao();
          break;
          }
        case OP_AUMENTO:
        case OP_DIMINUI:
        case OP_MULTIPLICA:
        case OP_DIVIDE:{
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case OP_AUMENTO:{
            jj_consume_token(OP_AUMENTO);
            break;
            }
          case OP_DIMINUI:{
            jj_consume_token(OP_DIMINUI);
            break;
            }
          case OP_MULTIPLICA:{
            jj_consume_token(OP_MULTIPLICA);
            break;
            }
          case OP_DIVIDE:{
            jj_consume_token(OP_DIVIDE);
            break;
            }
          default:
            jj_la1[11] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          Expressao();
          break;
          }
        default:
          jj_la1[12] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (ParseException e) {
consumeUntil(g,e,"Atribuicao");
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

/* ESTRUTURAS CONDICIONAIS */
  static final public void Condicional() throws ParseException {/*@bgen(jjtree) Condicional */
 SimpleNode jjtn000 = new SimpleNode(JJTCONDICIONAL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet g = Follow.Condicional;
    try {
      try {
        jj_consume_token(IF);
        jj_consume_token(36);
        Expressao();
        jj_consume_token(37);
        Comando();
        if (jj_2_2(2)) {
          jj_consume_token(ELSE);
          Comando();
        } else {
          ;
        }
      } catch (ParseException e) {
consumeUntil(g,e,"Condicional");
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

/* ESTRUTURAS DE REPETIÇÃO */
  static final public void Repeticao() throws ParseException {/*@bgen(jjtree) Repeticao */
 SimpleNode jjtn000 = new SimpleNode(JJTREPETICAO);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet g = Follow.Repeticao;
    try {
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case WHILE:{
          While();
          break;
          }
        case FOR:{
          For();
          break;
          }
        case DO:{
          DoWhile();
          break;
          }
        default:
          jj_la1[13] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (ParseException e) {
consumeUntil(g,e,"Repeticao");
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void While() throws ParseException {/*@bgen(jjtree) While */
 SimpleNode jjtn000 = new SimpleNode(JJTWHILE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet g = Follow.While;
    try {
      try {
        jj_consume_token(WHILE);
        jj_consume_token(36);
        Expressao();
        jj_consume_token(37);
        Comando();
      } catch (ParseException e) {
consumeUntil(g,e,"While");
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void For() throws ParseException {/*@bgen(jjtree) For */
 SimpleNode jjtn000 = new SimpleNode(JJTFOR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet g = Follow.For;
    try {
      try {
        jj_consume_token(FOR);
        jj_consume_token(36);
        Atribuicao();
        jj_consume_token(35);
        Expressao();
        jj_consume_token(35);
        Atribuicao();
        jj_consume_token(37);
        Comando();
      } catch (ParseException e) {
consumeUntil(g,e,"For");
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void DoWhile() throws ParseException {/*@bgen(jjtree) DoWhile */
 SimpleNode jjtn000 = new SimpleNode(JJTDOWHILE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet g = Follow.DoWhile;
    try {
      try {
        jj_consume_token(DO);
        Comando();
        jj_consume_token(WHILE);
        jj_consume_token(36);
        Expressao();
        jj_consume_token(37);
        jj_consume_token(PINGU);
      } catch (ParseException e) {
consumeUntil(g,e,"DoWhile");
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

/* ENTRADA/SAÍDA */
  static final public void EntradaSaida() throws ParseException {/*@bgen(jjtree) EntradaSaida */
 SimpleNode jjtn000 = new SimpleNode(JJTENTRADASAIDA);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet g = Follow.EntradaSaida;
    try {
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PRINT:{
          jj_consume_token(PRINT);
          jj_consume_token(36);
          Expressao();
          jj_consume_token(37);
          break;
          }
        case INPUT:{
          jj_consume_token(INPUT);
          jj_consume_token(36);
          jj_consume_token(ID);
          jj_consume_token(37);
          break;
          }
        default:
          jj_la1[14] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (ParseException e) {
consumeUntil(g,e,"EntradaSaida");
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

/* BLOCOS */
  static final public void Bloco() throws ParseException {/*@bgen(jjtree) Bloco */
 SimpleNode jjtn000 = new SimpleNode(JJTBLOCO);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet g = Follow.Bloco;
    try {
      try {
        jj_consume_token(INICIO_BLOCO);
        label_4:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case INICIO_BLOCO:
          case IF:
          case WHILE:
          case FOR:
          case DO:
          case PRINT:
          case INPUT:
          case ID:{
            ;
            break;
            }
          default:
            jj_la1[15] = jj_gen;
            break label_4;
          }
          Comando();
        }
        jj_consume_token(FIM_BLOCO);
      } catch (ParseException e) {
consumeUntil(g,e,"Bloco");
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

/* EXPRESSÕES */
  static final public void Expressao() throws ParseException {/*@bgen(jjtree) Expressao */
 SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSAO);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet g = Follow.Expressao;
    try {
      try {
        ExpressaoLogica();
      } catch (ParseException e) {
consumeUntil(g,e,"Expressao");
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void ExpressaoLogica() throws ParseException {/*@bgen(jjtree) ExpressaoLogica */
 SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSAOLOGICA);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet g = Follow.ExpressaoLogica;
    try {
      try {
        ExpressaoRelacional();
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case OP_LOGICO:{
            ;
            break;
            }
          default:
            jj_la1[16] = jj_gen;
            break label_5;
          }
          jj_consume_token(OP_LOGICO);
          ExpressaoRelacional();
        }
      } catch (ParseException e) {
consumeUntil(g,e,"ExpressaoLogica");
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void ExpressaoRelacional() throws ParseException {/*@bgen(jjtree) ExpressaoRelacional */
 SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSAORELACIONAL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet g = Follow.ExpressaoRelacional;
    try {
      try {
        ExpressaoAritmetica();
        label_6:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case OP_RELACIONAL:{
            ;
            break;
            }
          default:
            jj_la1[17] = jj_gen;
            break label_6;
          }
          jj_consume_token(OP_RELACIONAL);
          ExpressaoAritmetica();
        }
      } catch (ParseException e) {
consumeUntil(g,e,"ExpressaoRelacional");
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void ExpressaoAritmetica() throws ParseException {/*@bgen(jjtree) ExpressaoAritmetica */
 SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSAOARITMETICA);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet g = Follow.ExpressaoAritmetica;
    try {
      try {
        Termo();
        label_7:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case OP_ARITMETICO:{
            ;
            break;
            }
          default:
            jj_la1[18] = jj_gen;
            break label_7;
          }
          jj_consume_token(OP_ARITMETICO);
          Termo();
        }
      } catch (ParseException e) {
consumeUntil(g,e,"ExpressaoAritmetica");
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void Termo() throws ParseException {/*@bgen(jjtree) Termo */
 SimpleNode jjtn000 = new SimpleNode(JJTTERMO);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet g = Follow.Termo;
    try {
      try {
        Fator();
        label_8:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case OP_ARITMETICO:{
            ;
            break;
            }
          default:
            jj_la1[19] = jj_gen;
            break label_8;
          }
          jj_consume_token(OP_ARITMETICO);
          Fator();
        }
      } catch (ParseException e) {
consumeUntil(g,e,"Termo");
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void Fator() throws ParseException {/*@bgen(jjtree) Fator */
 SimpleNode jjtn000 = new SimpleNode(JJTFATOR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet g = Follow.Fator;
    try {
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ID:{
          jj_consume_token(ID);
          break;
          }
        case INTEIRO:{
          jj_consume_token(INTEIRO);
          break;
          }
        case FLOAT:{
          jj_consume_token(FLOAT);
          break;
          }
        case TRUE:{
          jj_consume_token(TRUE);
          break;
          }
        case FALSE:{
          jj_consume_token(FALSE);
          break;
          }
        case CHAR:{
          jj_consume_token(CHAR);
          break;
          }
        case STRING:{
          jj_consume_token(STRING);
          break;
          }
        case 36:{
          jj_consume_token(36);
          Expressao();
          jj_consume_token(37);
          break;
          }
        case 38:{
          jj_consume_token(38);
          Fator();
          break;
          }
        default:
          jj_la1[20] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (ParseException e) {
consumeUntil(g,e,"Fator");
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_3R_While_278_3_24()
 {
    if (jj_scan_token(WHILE)) return true;
    return false;
  }

  static private boolean jj_3R_Comando_229_5_13()
 {
    if (jj_3R_EntradaSaida_313_3_17()) return true;
    return false;
  }

  static private boolean jj_3R_Bloco_325_3_18()
 {
    if (jj_scan_token(INICIO_BLOCO)) return true;
    return false;
  }

  static private boolean jj_3R_Comando_227_5_12()
 {
    if (jj_3R_Atribuicao_241_3_16()) return true;
    return false;
  }

  static private boolean jj_3R_Comando_225_5_11()
 {
    if (jj_3R_Repeticao_269_3_15()) return true;
    return false;
  }

  static private boolean jj_3R_EntradaSaida_315_7_23()
 {
    if (jj_scan_token(INPUT)) return true;
    return false;
  }

  static private boolean jj_3_1()
 {
    if (jj_3R_Condicional_257_3_9()) return true;
    return false;
  }

  static private boolean jj_3R_Repeticao_269_5_19()
 {
    if (jj_3R_While_278_3_24()) return true;
    return false;
  }

  static private boolean jj_3R_Repeticao_269_3_15()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Repeticao_269_5_19()) {
    jj_scanpos = xsp;
    if (jj_3R_Repeticao_269_15_20()) {
    jj_scanpos = xsp;
    if (jj_3R_Repeticao_269_23_21()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_EntradaSaida_314_5_22()
 {
    if (jj_scan_token(PRINT)) return true;
    return false;
  }

  static private boolean jj_3R_Comando_221_3_10()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_3R_Comando_225_5_11()) {
    jj_scanpos = xsp;
    if (jj_3R_Comando_227_5_12()) {
    jj_scanpos = xsp;
    if (jj_3R_Comando_229_5_13()) {
    jj_scanpos = xsp;
    if (jj_3R_Comando_231_5_14()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_EntradaSaida_313_3_17()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_EntradaSaida_314_5_22()) {
    jj_scanpos = xsp;
    if (jj_3R_EntradaSaida_315_7_23()) return true;
    }
    return false;
  }

  static private boolean jj_3_2()
 {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_Comando_221_3_10()) return true;
    return false;
  }

  static private boolean jj_3R_Condicional_257_3_9()
 {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(36)) return true;
    return false;
  }

  static private boolean jj_3R_DoWhile_302_3_26()
 {
    if (jj_scan_token(DO)) return true;
    return false;
  }

  static private boolean jj_3R_Repeticao_269_23_21()
 {
    if (jj_3R_DoWhile_302_3_26()) return true;
    return false;
  }

  static private boolean jj_3R_For_288_3_25()
 {
    if (jj_scan_token(FOR)) return true;
    return false;
  }

  static private boolean jj_3R_Atribuicao_241_3_16()
 {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3R_Repeticao_269_15_20()
 {
    if (jj_3R_For_288_3_25()) return true;
    return false;
  }

  static private boolean jj_3R_Comando_231_5_14()
 {
    if (jj_3R_Bloco_325_3_18()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public pingulangCompilerTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[21];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x1e00,0x3e8040,0x1e00,0x3e000000,0x3e000000,0x0,0x3e000000,0x3e000000,0x3e000000,0x3e000000,0x3e0040,0x3c000000,0x3e000000,0xe0000,0x300000,0x3e8040,0x800000,0x400000,0x1000000,0x1000000,0xc0006000,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x0,0x4,0x0,0x0,0x0,0x8,0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x0,0x57,};
	}
  static final private JJCalls[] jj_2_rtns = new JJCalls[2];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public pingulangCompiler(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public pingulangCompiler(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new pingulangCompilerTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 21; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 21; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public pingulangCompiler(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new pingulangCompilerTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 21; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new pingulangCompilerTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 21; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public pingulangCompiler(pingulangCompilerTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 21; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(pingulangCompilerTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 21; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }
  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[39];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 21; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 39; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 2; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}
