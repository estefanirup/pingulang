/* pingulangCompiler.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. pingulangCompiler.java */
package source;
import recovery.*;
public class pingulangCompiler/*@bgen(jjtree)*/implements pingulangCompilerTreeConstants, pingulangCompilerConstants {/*@bgen(jjtree)*/
  protected static JJTpingulangCompilerState jjtree = new JJTpingulangCompilerState();public static void main(String args[]) throws ParseException {
    pingulangCompiler parser = new pingulangCompiler(System.in);

    while (true)
    {
      System.out.println("Lendo codigo");
      System.out.print("digite :");
      try
      {
        SimpleNode n = pingulangCompiler.Programa();
        n.dump("");
        //parser.Programa();
        //System.out.println("Analise concluida com sucesso! Programa valido.");
      }
      catch (ParseException e)
      {
            System.err.println("Erro de sintaxe:");
            System.err.println(e.getMessage());
      }
      catch (TokenMgrError e)
      {
            System.err.println("Erro l\u00e9xico:");
            System.err.println(e.getMessage());
      }
  }
}
 static public String im(int x)
  {
    int k;
        String s;
    s = tokenImage[x];
    k = s.lastIndexOf("\"");
    try {
      s = s.substring(1,k);
    }
   catch (StringIndexOutOfBoundsException e)
           {}
   return s;
  }

  static Token lastError = null;
  static boolean eof;    // variável que indica se EOF foi alcançado

  // o método abaixo consome tokens até alcançar um que pertença ao conjunto
  // de sincronização
  static void consumeUntil(RecoverySet g,
                         ParseException e,
                         String met) throws ParseEOFException,
                                            ParseException
  {
        Token tok;
        System.out.println();
        System.out.println("*** " + met + " ***");
        System.out.println("     Conjunto de sincroniza\u00e7\u00e3o: " + g);

        if (g == null) throw e; // se o conjunto é null, propaga a exceção

        tok = getToken(1); // pega token corrente
        while ( ! eof ) { // se não chegou ao fim do arquivo
          if ( g.contains(tok.kind)) {//achou um token no conjunto
            System.out.println("     Encontrado token de sincroniza\u00e7\u00e3o: " +
                               im(tok.kind));
            break;
          }
          System.out.println("     Ignorando o token: " + im(tok.kind));
          getNextToken();     // pega próximo token       
      tok = getToken(1);
          if (tok.kind == EOF && ! g.contains(EOF) ) // fim da entrada?   
              eof = true;
        }
    if ( tok != lastError)  {
          System.out.println(e.getMessage());
          lastError = tok;

        }
        if ( eof )
          throw new ParseEOFException("Encontrei EOF onde n\u00e3o deveria.");
  }

/* REGRAS GRAMATICAIS */
  static final public SimpleNode Programa() throws ParseException {/*@bgen(jjtree) Programa */
 SimpleNode jjtn000 = new SimpleNode(JJTPROGRAMA);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet g = Follow.Programa;
    try {
      try {
        Inicio();
        label_1:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case INT_TYPE:
          case FLOAT_TYPE:
          case BOOL_TYPE:
          case CHAR_TYPE:{
            ;
            break;
            }
          default:
            jj_la1[0] = jj_gen;
            break label_1;
          }
          Declaracao();
        }
        label_2:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case INICIO_BLOCO:
          case IF:
          case WHILE:
          case FOR:
          case DO:
          case PRINT:
          case INPUT:
          case ID:{
            ;
            break;
            }
          default:
            jj_la1[1] = jj_gen;
            break label_2;
          }
          Comando();
        }
        Fim();
{if ("" != null) return jjtn000;}
      } catch (ParseException e) {
consumeUntil(g,e,"Programa");
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
}

  static final public void Declaracao() throws ParseException {/*@bgen(jjtree) Declaracao */
 SimpleNode jjtn000 = new SimpleNode(JJTDECLARACAO);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet g = Follow.Declaracao;
    try {
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INT_TYPE:{
          TipoInt();
          break;
          }
        case FLOAT_TYPE:{
          TipoFloat();
          break;
          }
        case BOOL_TYPE:{
          TipoBool();
          break;
          }
        case CHAR_TYPE:{
          TipoChar();
          break;
          }
        default:
          jj_la1[2] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        ListaVariaveis();
        FimLinha();
      } catch (ParseException e) {
consumeUntil(g,e,"Declaracao");
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void ListaVariaveis() throws ParseException {/*@bgen(jjtree) ListaVariaveis */
 SimpleNode jjtn000 = new SimpleNode(JJTLISTAVARIAVEIS);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet g = Follow.ListaVariaveis;
    try {
      try {
        Identificador();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case OP_IGUAL:
        case OP_AUMENTO:
        case OP_DIMINUI:
        case OP_MULTIPLICA:
        case OP_DIVIDE:{
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case OP_IGUAL:{
            Igual();
            break;
            }
          case OP_AUMENTO:{
            Aumento();
            break;
            }
          case OP_DIMINUI:{
            Diminui();
            break;
            }
          case OP_MULTIPLICA:{
            Multiplica();
            break;
            }
          case OP_DIVIDE:{
            Divide();
            break;
            }
          default:
            jj_la1[3] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          Expressao();
          break;
          }
        default:
          jj_la1[4] = jj_gen;
          ;
        }
        label_3:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 35:{
            ;
            break;
            }
          default:
            jj_la1[5] = jj_gen;
            break label_3;
          }
          jj_consume_token(35);
          Identificador();
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case OP_IGUAL:
          case OP_AUMENTO:
          case OP_DIMINUI:
          case OP_MULTIPLICA:
          case OP_DIVIDE:{
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case OP_IGUAL:{
              Igual();
              break;
              }
            case OP_AUMENTO:{
              Aumento();
              break;
              }
            case OP_DIMINUI:{
              Diminui();
              break;
              }
            case OP_MULTIPLICA:{
              Multiplica();
              break;
              }
            case OP_DIVIDE:{
              Divide();
              break;
              }
            default:
              jj_la1[6] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            Expressao();
            break;
            }
          default:
            jj_la1[7] = jj_gen;
            ;
          }
        }
      } catch (ParseException e) {
consumeUntil(g,e,"ListaVariaveis");
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
}

  static final public void Variavel() throws ParseException {/*@bgen(jjtree) Variavel */
 SimpleNode jjtn000 = new SimpleNode(JJTVARIAVEL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet g = Follow.Variavel;
    try {
      try {
        Identificador();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case OP_IGUAL:
        case OP_AUMENTO:
        case OP_DIMINUI:
        case OP_MULTIPLICA:
        case OP_DIVIDE:{
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case OP_IGUAL:{
            Igual();
            break;
            }
          case OP_AUMENTO:{
            Aumento();
            break;
            }
          case OP_DIMINUI:{
            Diminui();
            break;
            }
          case OP_MULTIPLICA:{
            Multiplica();
            break;
            }
          case OP_DIVIDE:{
            Divide();
            break;
            }
          default:
            jj_la1[8] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          Expressao();
          break;
          }
        default:
          jj_la1[9] = jj_gen;
          ;
        }
      } catch (ParseException e) {
consumeUntil(g,e,"Variavel");
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

/* REGRAS DE COMANDOS */
  static final public void Comando() throws ParseException {/*@bgen(jjtree) Comando */
 SimpleNode jjtn000 = new SimpleNode(JJTCOMANDO);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet g = Follow.Comando;
    try {
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IF:{
          Condicional();
          break;
          }
        case WHILE:
        case FOR:
        case DO:{
          Repeticao();
          break;
          }
        case ID:{
          Atribuicao();
          FimLinha();
          break;
          }
        case PRINT:
        case INPUT:{
          EntradaSaida();
          FimLinha();
          break;
          }
        case INICIO_BLOCO:{
          Bloco();
          break;
          }
        default:
          jj_la1[10] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (ParseException e) {
consumeUntil(g,e,"Comando");
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

/* ATRIBUIÇÕES */
  static final public void Atribuicao() throws ParseException {/*@bgen(jjtree) Atribuicao */
 SimpleNode jjtn000 = new SimpleNode(JJTATRIBUICAO);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet g = Follow.Atribuicao;
    try {
      try {
        Identificador();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case OP_IGUAL:{
          Igual();
          Expressao();
          break;
          }
        case OP_AUMENTO:
        case OP_DIMINUI:
        case OP_MULTIPLICA:
        case OP_DIVIDE:{
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case OP_AUMENTO:{
            Aumento();
            break;
            }
          case OP_DIMINUI:{
            Diminui();
            break;
            }
          case OP_MULTIPLICA:{
            Multiplica();
            break;
            }
          case OP_DIVIDE:{
            Divide();
            break;
            }
          default:
            jj_la1[11] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          Expressao();
          break;
          }
        default:
          jj_la1[12] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (ParseException e) {
consumeUntil(g,e,"Atribuicao");
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

/* ESTRUTURAS CONDICIONAIS */
  static final public void Condicional() throws ParseException {/*@bgen(jjtree) Condicional */
 SimpleNode jjtn000 = new SimpleNode(JJTCONDICIONAL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet g = Follow.Condicional;
    try {
      try {
        If();
        jj_consume_token(36);
        Expressao();
        jj_consume_token(37);
        Comando();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ELSE:{
          Else();
          Comando();
          break;
          }
        default:
          jj_la1[13] = jj_gen;
          ;
        }
      } catch (ParseException e) {
consumeUntil(g,e,"Condicional");
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

/* ESTRUTURAS DE REPETIÇÃO */
  static final public void Repeticao() throws ParseException {/*@bgen(jjtree) Repeticao */
 SimpleNode jjtn000 = new SimpleNode(JJTREPETICAO);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet g = Follow.Repeticao;
    try {
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case WHILE:{
          While();
          break;
          }
        case FOR:{
          For();
          break;
          }
        case DO:{
          DoWhile();
          break;
          }
        default:
          jj_la1[14] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (ParseException e) {
consumeUntil(g,e,"Repeticao");
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void While() throws ParseException {/*@bgen(jjtree) While */
 SimpleNode jjtn000 = new SimpleNode(JJTWHILE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet g = Follow.While;
    try {
      try {
        While_Token();
        jj_consume_token(36);
        Expressao();
        jj_consume_token(37);
        Comando();
      } catch (ParseException e) {
consumeUntil(g,e,"While");
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void For() throws ParseException {/*@bgen(jjtree) For */
 SimpleNode jjtn000 = new SimpleNode(JJTFOR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet g = Follow.For;
    try {
      try {
        For_Token();
        jj_consume_token(36);
        Atribuicao();
        jj_consume_token(35);
        Expressao();
        jj_consume_token(35);
        Atribuicao();
        jj_consume_token(37);
        Comando();
      } catch (ParseException e) {
consumeUntil(g,e,"For");
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void DoWhile() throws ParseException {/*@bgen(jjtree) DoWhile */
 SimpleNode jjtn000 = new SimpleNode(JJTDOWHILE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet g = Follow.DoWhile;
    try {
      try {
        Do();
        Comando();
        While();
        jj_consume_token(36);
        Expressao();
        jj_consume_token(37);
        FimLinha();
      } catch (ParseException e) {
consumeUntil(g,e,"DoWhile");
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

/* ENTRADA/SAÍDA */
  static final public void EntradaSaida() throws ParseException {/*@bgen(jjtree) EntradaSaida */
 SimpleNode jjtn000 = new SimpleNode(JJTENTRADASAIDA);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet g = Follow.EntradaSaida;
    try {
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PRINT:{
          Print();
          jj_consume_token(36);
          Expressao();
          jj_consume_token(37);
          break;
          }
        case INPUT:{
          Input();
          jj_consume_token(36);
          Identificador();
          jj_consume_token(37);
          break;
          }
        default:
          jj_la1[15] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (ParseException e) {
consumeUntil(g,e,"EntradaSaida");
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

/* BLOCOS */
  static final public void Bloco() throws ParseException {/*@bgen(jjtree) Bloco */
 SimpleNode jjtn000 = new SimpleNode(JJTBLOCO);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet g = Follow.Bloco;
    try {
      try {
        InicioBloco();
        label_4:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case INICIO_BLOCO:
          case IF:
          case WHILE:
          case FOR:
          case DO:
          case PRINT:
          case INPUT:
          case ID:{
            ;
            break;
            }
          default:
            jj_la1[16] = jj_gen;
            break label_4;
          }
          Comando();
        }
        FimBloco();
      } catch (ParseException e) {
consumeUntil(g,e,"Bloco");
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

/* EXPRESSÕES */
  static final public void Expressao() throws ParseException {/*@bgen(jjtree) Expressao */
 SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSAO);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet g = Follow.Expressao;
    try {
      try {
        ExpressaoLogica();
      } catch (ParseException e) {
consumeUntil(g,e,"Expressao");
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void ExpressaoLogica() throws ParseException {/*@bgen(jjtree) ExpressaoLogica */
 SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSAOLOGICA);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet g = Follow.ExpressaoLogica;
    try {
      try {
        ExpressaoRelacional();
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case OP_LOGICO:{
            ;
            break;
            }
          default:
            jj_la1[17] = jj_gen;
            break label_5;
          }
          OperadorLogico();
          ExpressaoRelacional();
        }
      } catch (ParseException e) {
consumeUntil(g,e,"ExpressaoLogica");
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void ExpressaoRelacional() throws ParseException {/*@bgen(jjtree) ExpressaoRelacional */
 SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSAORELACIONAL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet g = Follow.ExpressaoRelacional;
    try {
      try {
        ExpressaoAritmetica();
        label_6:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case OP_RELACIONAL:{
            ;
            break;
            }
          default:
            jj_la1[18] = jj_gen;
            break label_6;
          }
          OperadorRelacional();
          ExpressaoAritmetica();
        }
      } catch (ParseException e) {
consumeUntil(g,e,"ExpressaoRelacional");
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void ExpressaoAritmetica() throws ParseException {/*@bgen(jjtree) ExpressaoAritmetica */
 SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSAOARITMETICA);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet g = Follow.ExpressaoAritmetica;
    try {
      try {
        Termo();
        label_7:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case OP_ARITMETICO:{
            ;
            break;
            }
          default:
            jj_la1[19] = jj_gen;
            break label_7;
          }
          OperadorAritmetico();
          Termo();
        }
      } catch (ParseException e) {
consumeUntil(g,e,"ExpressaoAritmetica");
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void Termo() throws ParseException {/*@bgen(jjtree) Termo */
 SimpleNode jjtn000 = new SimpleNode(JJTTERMO);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet g = Follow.Termo;
    try {
      try {
        Fator();
        label_8:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case OP_ARITMETICO:{
            ;
            break;
            }
          default:
            jj_la1[20] = jj_gen;
            break label_8;
          }
          OperadorAritmetico();
          Fator();
        }
      } catch (ParseException e) {
consumeUntil(g,e,"Termo");
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void Fator() throws ParseException {/*@bgen(jjtree) Fator */
 SimpleNode jjtn000 = new SimpleNode(JJTFATOR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet g = Follow.Fator;
    try {
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ID:{
          Identificador();
          break;
          }
        case INTEIRO:{
          jj_consume_token(INTEIRO);
          break;
          }
        case FLOAT:{
          jj_consume_token(FLOAT);
          break;
          }
        case TRUE:{
          jj_consume_token(TRUE);
          break;
          }
        case FALSE:{
          jj_consume_token(FALSE);
          break;
          }
        case CHAR:{
          jj_consume_token(CHAR);
          break;
          }
        case STRING:{
          jj_consume_token(STRING);
          break;
          }
        case 36:{
          jj_consume_token(36);
          Expressao();
          jj_consume_token(37);
          break;
          }
        case 38:{
          jj_consume_token(38);
          Fator();
          break;
          }
        default:
          jj_la1[21] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (ParseException e) {
consumeUntil(g,e,"Fator");
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

/* TERMINAIS */

//inicio e fim
  static final public void Inicio() throws ParseException {/*@bgen(jjtree) Inicio */
  SimpleNode jjtn000 = new SimpleNode(JJTINICIO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(INICIO_PROGRAMA);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void Fim() throws ParseException {/*@bgen(jjtree) Fim */
  SimpleNode jjtn000 = new SimpleNode(JJTFIM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FIM_PROGRAMA);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

//ID
  static final public void Identificador() throws ParseException {/*@bgen(jjtree) Identificador */
  SimpleNode jjtn000 = new SimpleNode(JJTIDENTIFICADOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ID);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

//bloco
  static final public void InicioBloco() throws ParseException {/*@bgen(jjtree) InicioBloco */
  SimpleNode jjtn000 = new SimpleNode(JJTINICIOBLOCO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(INICIO_BLOCO);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void FimBloco() throws ParseException {/*@bgen(jjtree) FimBloco */
  SimpleNode jjtn000 = new SimpleNode(JJTFIMBLOCO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FIM_BLOCO);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

//variaveis
  static final public void TipoInt() throws ParseException {/*@bgen(jjtree) TipoInt */
  SimpleNode jjtn000 = new SimpleNode(JJTTIPOINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(INT_TYPE);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void TipoFloat() throws ParseException {/*@bgen(jjtree) TipoFloat */
  SimpleNode jjtn000 = new SimpleNode(JJTTIPOFLOAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FLOAT_TYPE);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void TipoBool() throws ParseException {/*@bgen(jjtree) TipoBool */
  SimpleNode jjtn000 = new SimpleNode(JJTTIPOBOOL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(BOOL_TYPE);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void TipoChar() throws ParseException {/*@bgen(jjtree) TipoChar */
  SimpleNode jjtn000 = new SimpleNode(JJTTIPOCHAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(CHAR_TYPE);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

//operacoes
  static final public void Igual() throws ParseException {/*@bgen(jjtree) Igual */
  SimpleNode jjtn000 = new SimpleNode(JJTIGUAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(OP_IGUAL);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void Aumento() throws ParseException {/*@bgen(jjtree) Aumento */
  SimpleNode jjtn000 = new SimpleNode(JJTAUMENTO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(OP_AUMENTO);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void Diminui() throws ParseException {/*@bgen(jjtree) Diminui */
  SimpleNode jjtn000 = new SimpleNode(JJTDIMINUI);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(OP_DIMINUI);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void Multiplica() throws ParseException {/*@bgen(jjtree) Multiplica */
  SimpleNode jjtn000 = new SimpleNode(JJTMULTIPLICA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(OP_MULTIPLICA);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void Divide() throws ParseException {/*@bgen(jjtree) Divide */
  SimpleNode jjtn000 = new SimpleNode(JJTDIVIDE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(OP_DIVIDE);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void OperadorAritmetico() throws ParseException {/*@bgen(jjtree) OperadorAritmetico */
  SimpleNode jjtn000 = new SimpleNode(JJTOPERADORARITMETICO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(OP_ARITMETICO);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void OperadorLogico() throws ParseException {/*@bgen(jjtree) OperadorLogico */
  SimpleNode jjtn000 = new SimpleNode(JJTOPERADORLOGICO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(OP_LOGICO);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void OperadorRelacional() throws ParseException {/*@bgen(jjtree) OperadorRelacional */
  SimpleNode jjtn000 = new SimpleNode(JJTOPERADORRELACIONAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(OP_RELACIONAL);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

//funcoes
  static final public void If() throws ParseException {/*@bgen(jjtree) If */
  SimpleNode jjtn000 = new SimpleNode(JJTIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IF);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void Else() throws ParseException {/*@bgen(jjtree) Else */
  SimpleNode jjtn000 = new SimpleNode(JJTELSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ELSE);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void Do() throws ParseException {/*@bgen(jjtree) Do */
  SimpleNode jjtn000 = new SimpleNode(JJTDO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(DO);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void While_Token() throws ParseException {/*@bgen(jjtree) While_Token */
  SimpleNode jjtn000 = new SimpleNode(JJTWHILE_TOKEN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(WHILE);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void For_Token() throws ParseException {/*@bgen(jjtree) For_Token */
  SimpleNode jjtn000 = new SimpleNode(JJTFOR_TOKEN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FOR);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

//console
  static final public void Print() throws ParseException {/*@bgen(jjtree) Print */
  SimpleNode jjtn000 = new SimpleNode(JJTPRINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(PRINT);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void Input() throws ParseException {/*@bgen(jjtree) Input */
  SimpleNode jjtn000 = new SimpleNode(JJTINPUT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(INPUT);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

//fim de linha
  static final public void FimLinha() throws ParseException {/*@bgen(jjtree) FimLinha */
  SimpleNode jjtn000 = new SimpleNode(JJTFIMLINHA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(PINGU);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public pingulangCompilerTokenManager token_source;
  static JavaCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[22];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x1e00,0x3e8040,0x1e00,0x3e000000,0x3e000000,0x0,0x3e000000,0x3e000000,0x3e000000,0x3e000000,0x3e8040,0x3c000000,0x3e000000,0x10000,0xe0000,0x300000,0x3e8040,0x800000,0x400000,0x1000000,0x1000000,0xc0006000,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x0,0x4,0x0,0x0,0x0,0x8,0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x0,0x57,};
	}

  /** Constructor with InputStream. */
  public pingulangCompiler(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public pingulangCompiler(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new pingulangCompilerTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 22; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 22; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public pingulangCompiler(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new JavaCharStream(stream, 1, 1);
	 token_source = new pingulangCompilerTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 22; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new JavaCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new pingulangCompilerTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 22; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public pingulangCompiler(pingulangCompilerTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 22; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(pingulangCompilerTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 22; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[39];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 22; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 39; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
