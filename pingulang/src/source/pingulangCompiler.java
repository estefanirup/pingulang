/* pingulangCompiler.java */
/* Generated By:JavaCC: Do not edit this line. pingulangCompiler.java */
package source;

public class pingulangCompiler implements pingulangCompilerConstants {
  public static void main(String args[]) throws ParseException {
    pingulangCompiler parser = new pingulangCompiler(System.in);
    try {
        parser.Programa();
        System.out.println("Analise concluda com sucesso! Programa valido.");
    } catch (ParseException e) {
            System.err.println("Erro de sintaxe:");
            System.err.println(e.getMessage());
        } catch (TokenMgrError e) {
            System.err.println("Erro l\u00e9xico:");
            System.err.println(e.getMessage());
        }
}

/* REGRAS GRAMATICAIS */
  static final public void Programa() throws ParseException {
    jj_consume_token(INICIO_PROGRAMA);
    Declaracoes();
    Comandos();
    jj_consume_token(FIM_PROGRAMA);
}

  static final public void Declaracoes() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INT_TYPE:
      case FLOAT_TYPE:
      case BOOL_TYPE:
      case CHAR_TYPE:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      Declaracao();
    }
}

  static final public void Declaracao() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT_TYPE:{
      jj_consume_token(INT_TYPE);
      break;
      }
    case FLOAT_TYPE:{
      jj_consume_token(FLOAT_TYPE);
      break;
      }
    case BOOL_TYPE:{
      jj_consume_token(BOOL_TYPE);
      break;
      }
    case CHAR_TYPE:{
      jj_consume_token(CHAR_TYPE);
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    ListaVariaveis();
    jj_consume_token(PINGU);
}

  static final public void DeclaracaoSemPingu() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT_TYPE:{
      jj_consume_token(INT_TYPE);
      break;
      }
    case FLOAT_TYPE:{
      jj_consume_token(FLOAT_TYPE);
      break;
      }
    case BOOL_TYPE:{
      jj_consume_token(BOOL_TYPE);
      break;
      }
    case CHAR_TYPE:{
      jj_consume_token(CHAR_TYPE);
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    ListaVariaveis();
}

  static final public void ListaVariaveis() throws ParseException {
    jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OP_IGUAL:
    case OP_AUMENTO:
    case OP_DIMINUI:
    case OP_MULTIPLICA:
    case OP_DIVIDE:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OP_IGUAL:{
        jj_consume_token(OP_IGUAL);
        break;
        }
      case OP_AUMENTO:{
        jj_consume_token(OP_AUMENTO);
        break;
        }
      case OP_DIMINUI:{
        jj_consume_token(OP_DIMINUI);
        break;
        }
      case OP_MULTIPLICA:{
        jj_consume_token(OP_MULTIPLICA);
        break;
        }
      case OP_DIVIDE:{
        jj_consume_token(OP_DIVIDE);
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      Expressao();
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 35:{
        ;
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        break label_2;
      }
      jj_consume_token(35);
      jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OP_IGUAL:
      case OP_AUMENTO:
      case OP_DIMINUI:
      case OP_MULTIPLICA:
      case OP_DIVIDE:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case OP_IGUAL:{
          jj_consume_token(OP_IGUAL);
          break;
          }
        case OP_AUMENTO:{
          jj_consume_token(OP_AUMENTO);
          break;
          }
        case OP_DIMINUI:{
          jj_consume_token(OP_DIMINUI);
          break;
          }
        case OP_MULTIPLICA:{
          jj_consume_token(OP_MULTIPLICA);
          break;
          }
        case OP_DIVIDE:{
          jj_consume_token(OP_DIVIDE);
          break;
          }
        default:
          jj_la1[6] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        Expressao();
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        ;
      }
    }
}

  static final public void Variavel() throws ParseException {
    jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OP_IGUAL:
    case OP_AUMENTO:
    case OP_DIMINUI:
    case OP_MULTIPLICA:
    case OP_DIVIDE:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OP_IGUAL:{
        jj_consume_token(OP_IGUAL);
        break;
        }
      case OP_AUMENTO:{
        jj_consume_token(OP_AUMENTO);
        break;
        }
      case OP_DIMINUI:{
        jj_consume_token(OP_DIMINUI);
        break;
        }
      case OP_MULTIPLICA:{
        jj_consume_token(OP_MULTIPLICA);
        break;
        }
      case OP_DIVIDE:{
        jj_consume_token(OP_DIVIDE);
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      Expressao();
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      ;
    }
}

/* REGRAS DE COMANDOS */
  static final public void Comandos() throws ParseException {
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INICIO_BLOCO:
      case IF:
      case WHILE:
      case FOR:
      case DO:
      case PRINT:
      case INPUT:
      case ID:{
        ;
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        break label_3;
      }
      Comando();
    }
}

  static final public void Comando() throws ParseException {
    if (jj_2_1(2)) {
      Condicional();
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case WHILE:
      case FOR:
      case DO:{
        Repeticao();
        break;
        }
      case ID:{
        Atribuicao();
        jj_consume_token(PINGU);
        break;
        }
      case PRINT:
      case INPUT:{
        EntradaSaida();
        jj_consume_token(PINGU);
        break;
        }
      case INICIO_BLOCO:{
        Bloco();
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
}

/* ATRIBUIÇÕES */
  static final public void Atribuicao() throws ParseException {
    jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OP_IGUAL:{
      jj_consume_token(OP_IGUAL);
      Expressao();
      break;
      }
    case OP_AUMENTO:
    case OP_DIMINUI:
    case OP_MULTIPLICA:
    case OP_DIVIDE:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OP_AUMENTO:{
        jj_consume_token(OP_AUMENTO);
        break;
        }
      case OP_DIMINUI:{
        jj_consume_token(OP_DIMINUI);
        break;
        }
      case OP_MULTIPLICA:{
        jj_consume_token(OP_MULTIPLICA);
        break;
        }
      case OP_DIVIDE:{
        jj_consume_token(OP_DIVIDE);
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      Expressao();
      break;
      }
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

/* ESTRUTURAS CONDICIONAIS */
  static final public void Condicional() throws ParseException {
    jj_consume_token(IF);
    jj_consume_token(36);
    Expressao();
    jj_consume_token(37);
    Comando();
    if (jj_2_2(2)) {
      jj_consume_token(ELSE);
      Comando();
    } else {
      ;
    }
}

/* ESTRUTURAS DE REPETIÇÃO */
  static final public void Repeticao() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case WHILE:{
      While();
      break;
      }
    case FOR:{
      For();
      break;
      }
    case DO:{
      DoWhile();
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void While() throws ParseException {
    jj_consume_token(WHILE);
    jj_consume_token(36);
    Expressao();
    jj_consume_token(37);
    Comando();
}

  static final public void For() throws ParseException {
    jj_consume_token(FOR);
    jj_consume_token(36);
    if (jj_2_3(2147483647)) {
      DeclaracaoSemPingu();
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ID:{
        Atribuicao();
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(35);
    Expressao();
    jj_consume_token(35);
    Atribuicao();
    jj_consume_token(37);
    Comando();
}

  static final public void DoWhile() throws ParseException {
    jj_consume_token(DO);
    Comando();
    jj_consume_token(WHILE);
    jj_consume_token(36);
    Expressao();
    jj_consume_token(37);
    jj_consume_token(PINGU);
}

/* ENTRADA/SAÍDA */
  static final public void EntradaSaida() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PRINT:{
      jj_consume_token(PRINT);
      jj_consume_token(36);
      Expressao();
      jj_consume_token(37);
      break;
      }
    case INPUT:{
      jj_consume_token(INPUT);
      jj_consume_token(36);
      jj_consume_token(ID);
      jj_consume_token(37);
      break;
      }
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

/* BLOCOS */
  static final public void Bloco() throws ParseException {
    jj_consume_token(INICIO_BLOCO);
    Comandos();
    jj_consume_token(FIM_BLOCO);
}

/* EXPRESSÕES */
  static final public void Expressao() throws ParseException {
    ExpressaoLogica();
}

  static final public void ExpressaoLogica() throws ParseException {
    ExpressaoRelacional();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OP_LOGICO:{
        ;
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        break label_4;
      }
      jj_consume_token(OP_LOGICO);
      ExpressaoRelacional();
    }
}

  static final public void ExpressaoRelacional() throws ParseException {
    ExpressaoAritmetica();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OP_RELACIONAL:{
        ;
        break;
        }
      default:
        jj_la1[18] = jj_gen;
        break label_5;
      }
      jj_consume_token(OP_RELACIONAL);
      ExpressaoAritmetica();
    }
}

  static final public void ExpressaoAritmetica() throws ParseException {
    Termo();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OP_ARITMETICO:{
        ;
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        break label_6;
      }
      jj_consume_token(OP_ARITMETICO);
      Termo();
    }
}

  static final public void Termo() throws ParseException {
    Fator();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OP_ARITMETICO:{
        ;
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        break label_7;
      }
      jj_consume_token(OP_ARITMETICO);
      Fator();
    }
}

  static final public void Fator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ID:{
      jj_consume_token(ID);
      break;
      }
    case INTEIRO:{
      jj_consume_token(INTEIRO);
      break;
      }
    case FLOAT:{
      jj_consume_token(FLOAT);
      break;
      }
    case TRUE:{
      jj_consume_token(TRUE);
      break;
      }
    case FALSE:{
      jj_consume_token(FALSE);
      break;
      }
    case CHAR:{
      jj_consume_token(CHAR);
      break;
      }
    case STRING:{
      jj_consume_token(STRING);
      break;
      }
    case 36:{
      jj_consume_token(36);
      Expressao();
      jj_consume_token(37);
      break;
      }
    case 38:{
      jj_consume_token(38);
      Fator();
      break;
      }
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_3()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_3R_Condicional_181_5_8()
 {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(36)) return true;
    return false;
  }

  static private boolean jj_3R_EntradaSaida_224_7_22()
 {
    if (jj_scan_token(INPUT)) return true;
    return false;
  }

  static private boolean jj_3R_EntradaSaida_223_5_16()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_EntradaSaida_223_5_21()) {
    jj_scanpos = xsp;
    if (jj_3R_EntradaSaida_224_7_22()) return true;
    }
    return false;
  }

  static private boolean jj_3R_EntradaSaida_223_5_21()
 {
    if (jj_scan_token(PRINT)) return true;
    return false;
  }

  static private boolean jj_3R_DoWhile_216_5_25()
 {
    if (jj_scan_token(DO)) return true;
    return false;
  }

  static private boolean jj_3R_Atribuicao_169_5_15()
 {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3_3()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(9)) {
    jj_scanpos = xsp;
    if (jj_scan_token(10)) {
    jj_scanpos = xsp;
    if (jj_scan_token(11)) {
    jj_scanpos = xsp;
    if (jj_scan_token(12)) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_Comando_162_5_13()
 {
    if (jj_3R_Bloco_231_5_17()) return true;
    return false;
  }

  static private boolean jj_3R_Comando_160_5_12()
 {
    if (jj_3R_EntradaSaida_223_5_16()) return true;
    return false;
  }

  static private boolean jj_3R_Repeticao_189_23_20()
 {
    if (jj_3R_DoWhile_216_5_25()) return true;
    return false;
  }

  static private boolean jj_3R_Comando_158_5_11()
 {
    if (jj_3R_Atribuicao_169_5_15()) return true;
    return false;
  }

  static private boolean jj_3R_Comando_156_5_10()
 {
    if (jj_3R_Repeticao_189_5_14()) return true;
    return false;
  }

  static private boolean jj_3R_For_201_5_24()
 {
    if (jj_scan_token(FOR)) return true;
    return false;
  }

  static private boolean jj_3R_Comando_153_5_9()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_3R_Comando_156_5_10()) {
    jj_scanpos = xsp;
    if (jj_3R_Comando_158_5_11()) {
    jj_scanpos = xsp;
    if (jj_3R_Comando_160_5_12()) {
    jj_scanpos = xsp;
    if (jj_3R_Comando_162_5_13()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_1()
 {
    if (jj_3R_Condicional_181_5_8()) return true;
    return false;
  }

  static private boolean jj_3R_Repeticao_189_15_19()
 {
    if (jj_3R_For_201_5_24()) return true;
    return false;
  }

  static private boolean jj_3R_While_195_5_23()
 {
    if (jj_scan_token(WHILE)) return true;
    return false;
  }

  static private boolean jj_3R_Repeticao_189_5_14()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Repeticao_189_5_18()) {
    jj_scanpos = xsp;
    if (jj_3R_Repeticao_189_15_19()) {
    jj_scanpos = xsp;
    if (jj_3R_Repeticao_189_23_20()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_Repeticao_189_5_18()
 {
    if (jj_3R_While_195_5_23()) return true;
    return false;
  }

  static private boolean jj_3_2()
 {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_Comando_153_5_9()) return true;
    return false;
  }

  static private boolean jj_3R_Bloco_231_5_17()
 {
    if (jj_scan_token(INICIO_BLOCO)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public pingulangCompilerTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[22];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x1e00,0x1e00,0x1e00,0x3e000000,0x3e000000,0x0,0x3e000000,0x3e000000,0x3e000000,0x3e000000,0x3e8040,0x3e0040,0x3c000000,0x3e000000,0xe0000,0x0,0x300000,0x800000,0x400000,0x1000000,0x1000000,0xc0006000,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x8,0x0,0x0,0x0,0x0,0x4,0x4,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x0,0x0,0x57,};
	}
  static final private JJCalls[] jj_2_rtns = new JJCalls[3];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public pingulangCompiler(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public pingulangCompiler(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new pingulangCompilerTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 22; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 22; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public pingulangCompiler(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new pingulangCompilerTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 22; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new pingulangCompilerTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 22; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public pingulangCompiler(pingulangCompilerTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 22; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(pingulangCompilerTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 22; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }
  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[39];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 22; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 39; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 3; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			   case 2: jj_3_3(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}
