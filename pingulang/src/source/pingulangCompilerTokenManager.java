/* pingulangCompilerTokenManager.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. pingulangCompilerTokenManager.java */
package source;
import recovery.*;

/** Token Manager. */
@SuppressWarnings ("unused")
public class pingulangCompilerTokenManager implements pingulangCompilerConstants {

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x1c000000L) != 0L)
         {
            jjmatchedKind = 24;
            return -1;
         }
         if ((active0 & 0x4002000000L) != 0L)
            return 1;
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 24;
            return 25;
         }
         return -1;
      case 1:
         if ((active0 & 0x1c000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 24;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 33:
         return jjStartNfaWithStates_0(0, 38, 1);
      case 40:
         return jjStopAtPos(0, 36);
      case 41:
         return jjStopAtPos(0, 37);
      case 42:
         return jjMoveStringLiteralDfa1_0(0x10000000L);
      case 43:
         return jjMoveStringLiteralDfa1_0(0x4000000L);
      case 44:
         return jjStopAtPos(0, 35);
      case 45:
         return jjMoveStringLiteralDfa1_0(0x8000000L);
      case 47:
         return jjMoveStringLiteralDfa1_0(0x20000000L);
      case 61:
         return jjStartNfaWithStates_0(0, 25, 1);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x26000L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x200010L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x40400L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x220L);
      case 77:
         return jjMoveStringLiteralDfa1_0(0x100000L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0x10000L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x1100L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x8800L);
      case 89:
         return jjMoveStringLiteralDfa1_0(0x80000L);
      case 123:
         return jjStopAtPos(0, 6);
      case 125:
         return jjStopAtPos(0, 7);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa2_0(active0, 0x26010L);
      case 61:
         if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(1, 26);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 27);
         else if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(1, 28);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(1, 29);
         break;
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000L);
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0x9000L);
      case 73:
         return jjMoveStringLiteralDfa2_0(active0, 0x900L);
      case 76:
         return jjMoveStringLiteralDfa2_0(active0, 0x400L);
      case 79:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(1, 9);
         return jjMoveStringLiteralDfa2_0(active0, 0x140000L);
      case 83:
         return jjMoveStringLiteralDfa2_0(active0, 0x200020L);
      case 85:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000L);
      case 66:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000L);
      case 67:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000L);
      case 68:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(2, 11);
         break;
      case 69:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000L);
      case 71:
         return jjMoveStringLiteralDfa3_0(active0, 0x6000L);
      case 76:
         return jjMoveStringLiteralDfa3_0(active0, 0x10L);
      case 78:
         return jjMoveStringLiteralDfa3_0(active0, 0x1100L);
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0x400L);
      case 82:
         return jjMoveStringLiteralDfa3_0(active0, 0x48000L);
      case 83:
         return jjMoveStringLiteralDfa3_0(active0, 0x100020L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa4_0(active0, 0x10L);
      case 66:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000L);
      case 67:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000L);
      case 69:
         return jjMoveStringLiteralDfa4_0(active0, 0x7000L);
      case 71:
         return jjMoveStringLiteralDfa4_0(active0, 0x100L);
      case 72:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000L);
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000L);
      case 76:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000L);
      case 79:
         return jjMoveStringLiteralDfa4_0(active0, 0x20L);
      case 82:
         return jjMoveStringLiteralDfa4_0(active0, 0x400L);
      case 83:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000L);
      case 84:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa5_0(active0, 0x20030L);
      case 65:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(4, 15);
         return jjMoveStringLiteralDfa5_0(active0, 0xc0000L);
      case 69:
         return jjMoveStringLiteralDfa5_0(active0, 0x210000L);
      case 76:
         return jjMoveStringLiteralDfa5_0(active0, 0x101000L);
      case 78:
         return jjMoveStringLiteralDfa5_0(active0, 0x6000L);
      case 85:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(4, 8);
         break;
      case 90:
         return jjMoveStringLiteralDfa5_0(active0, 0x400L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa6_0(active0, 0xc0000L);
      case 65:
         if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(5, 20);
         break;
      case 69:
         return jjMoveStringLiteralDfa6_0(active0, 0x20L);
      case 73:
         return jjMoveStringLiteralDfa6_0(active0, 0x400L);
      case 79:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000L);
      case 82:
         return jjMoveStringLiteralDfa6_0(active0, 0x30000L);
      case 84:
         return jjMoveStringLiteralDfa6_0(active0, 0x6000L);
      case 86:
         return jjMoveStringLiteralDfa6_0(active0, 0x200010L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa7_0(active0, 0x10010L);
      case 68:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000L);
      case 69:
         if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(6, 21);
         return jjMoveStringLiteralDfa7_0(active0, 0x26000L);
      case 71:
         if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(6, 18);
         break;
      case 72:
         return jjMoveStringLiteralDfa7_0(active0, 0x20L);
      case 78:
         return jjMoveStringLiteralDfa7_0(active0, 0x400L);
      case 80:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa8_0(active0, 0x16020L);
      case 65:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000L);
      case 69:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000L);
      case 72:
         return jjMoveStringLiteralDfa8_0(active0, 0x400L);
      case 77:
         return jjMoveStringLiteralDfa8_0(active0, 0x10L);
      case 80:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000L);
      case 65:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(8, 10);
         break;
      case 66:
         return jjMoveStringLiteralDfa9_0(active0, 0x80000L);
      case 69:
         return jjMoveStringLiteralDfa9_0(active0, 0x20000L);
      case 79:
         return jjMoveStringLiteralDfa9_0(active0, 0x10L);
      case 81:
         return jjMoveStringLiteralDfa9_0(active0, 0x10000L);
      case 84:
         return jjMoveStringLiteralDfa9_0(active0, 0x20L);
      case 86:
         return jjMoveStringLiteralDfa9_0(active0, 0x6000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa10_0(active0, 0x6000L);
      case 66:
         return jjMoveStringLiteralDfa10_0(active0, 0x80000L);
      case 67:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000L);
      case 83:
         return jjMoveStringLiteralDfa10_0(active0, 0x10L);
      case 84:
         return jjMoveStringLiteralDfa10_0(active0, 0x20000L);
      case 85:
         return jjMoveStringLiteralDfa10_0(active0, 0x10020L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
static private int jjMoveStringLiteralDfa10_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa11_0(active0, 0x10L);
      case 65:
         return jjMoveStringLiteralDfa11_0(active0, 0x80000L);
      case 68:
         return jjMoveStringLiteralDfa11_0(active0, 0x20L);
      case 69:
         if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(10, 17);
         return jjMoveStringLiteralDfa11_0(active0, 0x10000L);
      case 72:
         return jjMoveStringLiteralDfa11_0(active0, 0x1000L);
      case 73:
         return jjMoveStringLiteralDfa11_0(active0, 0x6000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
static private int jjMoveStringLiteralDfa11_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa12_0(active0, 0x96000L);
      case 65:
         return jjMoveStringLiteralDfa12_0(active0, 0x1000L);
      case 78:
         return jjMoveStringLiteralDfa12_0(active0, 0x10L);
      case 79:
         return jjMoveStringLiteralDfa12_0(active0, 0x20L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0);
}
static private int jjMoveStringLiteralDfa12_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0);
      return 12;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa13_0(active0, 0x20L);
      case 68:
         return jjMoveStringLiteralDfa13_0(active0, 0x80000L);
      case 77:
         return jjMoveStringLiteralDfa13_0(active0, 0x4000L);
      case 78:
         return jjMoveStringLiteralDfa13_0(active0, 0x10000L);
      case 79:
         return jjMoveStringLiteralDfa13_0(active0, 0x10L);
      case 82:
         return jjMoveStringLiteralDfa13_0(active0, 0x1000L);
      case 86:
         return jjMoveStringLiteralDfa13_0(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0);
}
static private int jjMoveStringLiteralDfa13_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0);
      return 13;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa14_0(active0, 0x10000L);
      case 73:
         return jjMoveStringLiteralDfa14_0(active0, 0x2000L);
      case 77:
         return jjMoveStringLiteralDfa14_0(active0, 0x1000L);
      case 79:
         return jjMoveStringLiteralDfa14_0(active0, 0x84000L);
      case 80:
         return jjMoveStringLiteralDfa14_0(active0, 0x20L);
      case 83:
         if ((active0 & 0x10L) != 0L)
            return jjStopAtPos(13, 4);
         break;
      default :
         break;
   }
   return jjStartNfa_0(12, active0);
}
static private int jjMoveStringLiteralDfa14_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0);
      return 14;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa15_0(active0, 0x20L);
      case 79:
         if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(14, 16);
         else if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(14, 19);
         return jjMoveStringLiteralDfa15_0(active0, 0x1000L);
      case 82:
         return jjMoveStringLiteralDfa15_0(active0, 0x4000L);
      case 86:
         return jjMoveStringLiteralDfa15_0(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0);
}
static private int jjMoveStringLiteralDfa15_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0);
      return 15;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa16_0(active0, 0x2000L);
      case 80:
         return jjMoveStringLiteralDfa16_0(active0, 0x20L);
      case 82:
         return jjMoveStringLiteralDfa16_0(active0, 0x4000L);
      case 83:
         return jjMoveStringLiteralDfa16_0(active0, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0);
}
static private int jjMoveStringLiteralDfa16_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(14, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0);
      return 16;
   }
   switch(curChar)
   {
      case 65:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(16, 12);
         break;
      case 69:
         return jjMoveStringLiteralDfa17_0(active0, 0x4020L);
      case 82:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(16, 13);
         break;
      default :
         break;
   }
   return jjStartNfa_0(15, active0);
}
static private int jjMoveStringLiteralDfa17_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(15, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0);
      return 17;
   }
   switch(curChar)
   {
      case 82:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(17, 14);
         break;
      case 83:
         return jjMoveStringLiteralDfa18_0(active0, 0x20L);
      default :
         break;
   }
   return jjStartNfa_0(16, active0);
}
static private int jjMoveStringLiteralDfa18_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(16, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0);
      return 18;
   }
   switch(curChar)
   {
      case 83:
         return jjMoveStringLiteralDfa19_0(active0, 0x20L);
      default :
         break;
   }
   return jjStartNfa_0(17, active0);
}
static private int jjMoveStringLiteralDfa19_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(17, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0);
      return 19;
   }
   switch(curChar)
   {
      case 79:
         return jjMoveStringLiteralDfa20_0(active0, 0x20L);
      default :
         break;
   }
   return jjStartNfa_0(18, active0);
}
static private int jjMoveStringLiteralDfa20_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(18, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, active0);
      return 20;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa21_0(active0, 0x20L);
      default :
         break;
   }
   return jjStartNfa_0(19, active0);
}
static private int jjMoveStringLiteralDfa21_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(19, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, active0);
      return 21;
   }
   switch(curChar)
   {
      case 76:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(21, 5);
         break;
      default :
         break;
   }
   return jjStartNfa_0(20, active0);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 41;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 25:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(31, 32); }
                  else if (curChar == 47)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 30)
                        kind = 30;
                     { jjCheckNAddStates(3, 5); }
                  }
                  else if ((0xac2000000000L & l) != 0L)
                  {
                     if (kind > 24)
                        kind = 24;
                  }
                  else if ((0x100002600L & l) != 0L)
                  {
                     if (kind > 1)
                        kind = 1;
                  }
                  else if ((0x5000000000000000L & l) != 0L)
                  {
                     if (kind > 22)
                        kind = 22;
                  }
                  else if (curChar == 34)
                     { jjCheckNAddStates(6, 8); }
                  else if (curChar == 39)
                     { jjAddStates(9, 10); }
                  else if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 7;
                  else if (curChar == 33)
                     { jjCheckNAdd(1); }
                  else if (curChar == 61)
                     { jjCheckNAdd(1); }
                  if (curChar == 47)
                     { jjAddStates(11, 12); }
                  else if (curChar == 60)
                     { jjCheckNAdd(1); }
                  else if (curChar == 62)
                     { jjCheckNAdd(1); }
                  break;
               case 1:
                  if (curChar == 61 && kind > 22)
                     kind = 22;
                  break;
               case 2:
                  if (curChar == 61)
                     { jjCheckNAdd(1); }
                  break;
               case 3:
                  if (curChar == 33)
                     { jjCheckNAdd(1); }
                  break;
               case 4:
                  if ((0x5000000000000000L & l) != 0L && kind > 22)
                     kind = 22;
                  break;
               case 5:
                  if (curChar == 62)
                     { jjCheckNAdd(1); }
                  break;
               case 6:
                  if (curChar == 60)
                     { jjCheckNAdd(1); }
                  break;
               case 7:
                  if (curChar == 38 && kind > 23)
                     kind = 23;
                  break;
               case 8:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 11:
                  if ((0xac2000000000L & l) != 0L && kind > 24)
                     kind = 24;
                  break;
               case 12:
                  if (curChar == 39)
                     { jjAddStates(9, 10); }
                  break;
               case 13:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     { jjCheckNAdd(14); }
                  break;
               case 14:
                  if (curChar == 39 && kind > 32)
                     kind = 32;
                  break;
               case 16:
                  if ((0x8400000000L & l) != 0L)
                     { jjCheckNAdd(14); }
                  break;
               case 17:
                  if (curChar == 34)
                     { jjCheckNAddStates(6, 8); }
                  break;
               case 18:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     { jjCheckNAddStates(6, 8); }
                  break;
               case 20:
                  if ((0x8400000000L & l) != 0L)
                     { jjCheckNAddStates(6, 8); }
                  break;
               case 21:
                  if (curChar == 34 && kind > 33)
                     kind = 33;
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 34)
                     kind = 34;
                  jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 24:
                  if (curChar == 47)
                     { jjAddStates(11, 12); }
                  break;
               case 26:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 27:
                  if ((0x2400L & l) != 0L && kind > 2)
                     kind = 2;
                  break;
               case 28:
                  if (curChar == 10 && kind > 2)
                     kind = 2;
                  break;
               case 29:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(31, 32); }
                  break;
               case 31:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(31, 32); }
                  break;
               case 32:
                  if (curChar == 42)
                     { jjAddStates(13, 14); }
                  break;
               case 33:
                  if ((0xffff7fffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(34, 32); }
                  break;
               case 34:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(34, 32); }
                  break;
               case 35:
                  if (curChar == 47 && kind > 3)
                     kind = 3;
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 30)
                     kind = 30;
                  { jjCheckNAddStates(3, 5); }
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 30)
                     kind = 30;
                  { jjCheckNAdd(37); }
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(38, 39); }
                  break;
               case 39:
                  if (curChar == 46)
                     { jjCheckNAdd(40); }
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 31)
                     kind = 31;
                  { jjCheckNAdd(40); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe00000000L & l) != 0L)
                  {
                     if (kind > 34)
                        kind = 34;
                     { jjCheckNAdd(23); }
                  }
                  else if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 9:
                  if (curChar == 124 && kind > 23)
                     kind = 23;
                  break;
               case 10:
                  if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 13:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAdd(14); }
                  break;
               case 15:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 16:
                  if ((0x14404410000000L & l) != 0L)
                     { jjCheckNAdd(14); }
                  break;
               case 18:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(6, 8); }
                  break;
               case 19:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 20:
                  if ((0x14404410000000L & l) != 0L)
                     { jjCheckNAddStates(6, 8); }
                  break;
               case 22:
                  if ((0x7fffffe00000000L & l) == 0L)
                     break;
                  if (kind > 34)
                     kind = 34;
                  { jjCheckNAdd(23); }
                  break;
               case 23:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 34)
                     kind = 34;
                  { jjCheckNAdd(23); }
                  break;
               case 26:
                  { jjAddStates(0, 2); }
                  break;
               case 31:
                  { jjCheckNAddTwoStates(31, 32); }
                  break;
               case 33:
               case 34:
                  { jjCheckNAddTwoStates(34, 32); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 13:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 18:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(6, 8); }
                  break;
               case 26:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(0, 2); }
                  break;
               case 31:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(31, 32); }
                  break;
               case 33:
               case 34:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(34, 32); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 41 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, "\105\40\114\101\40\126\101\115\117\123\40\116\117\123", 
"\111\123\123\117\40\105\110\40\124\125\104\117\40\120\55\120\105\123\123\117\101\114", "\173", "\175", "\120\111\116\107\125", "\111\117", 
"\106\114\117\122\132\111\116\110\101", "\123\111\104", 
"\120\105\116\105\114\117\120\105\40\103\110\101\122\115\117\123\101", "\101\40\107\105\116\124\105\40\126\101\111\40\126\111\126\105\122", 
"\101\40\107\105\116\124\105\40\126\101\111\40\115\117\122\122\105\122", "\123\105\122\111\101", 
"\117\125\40\123\105\122\101\40\121\125\105\40\116\101\117", "\101\40\105\110\40\122\105\120\105\124\105", "\106\117\122\103\101\40\107", 
"\131\101\102\102\101\40\104\101\102\102\101\40\104\117\117", "\115\117\123\124\114\101", "\105\123\103\114\105\126\105", null, null, null, 
"\75", "\53\75", "\55\75", "\52\75", "\57\75", null, null, null, null, null, "\54", 
"\50", "\51", "\41", };
static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}
static final int[] jjnextStates = {
   26, 27, 29, 37, 38, 39, 18, 19, 21, 13, 15, 25, 30, 33, 35, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(Exception e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
static void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
static void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public pingulangCompilerTokenManager(JavaCharStream stream){

      if (input_stream != null)
        throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);

    input_stream = stream;
  }

  /** Constructor. */
  public pingulangCompilerTokenManager (JavaCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  
  static public void ReInit(JavaCharStream stream)
  {


    jjmatchedPos =
    jjnewStateCnt =
    0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  static private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 41; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  static public void ReInit(JavaCharStream stream, int lexState)
  
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public static void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }


/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0x7ffffffff1L, 
};
static final long[] jjtoSkip = {
   0xeL, 
};
static final long[] jjtoSpecial = {
   0x0L, 
};
static final long[] jjtoMore = {
   0x0L, 
};
    static protected JavaCharStream  input_stream;

    static private final int[] jjrounds = new int[41];
    static private final int[] jjstateSet = new int[2 * 41];
    private static final StringBuilder jjimage = new StringBuilder();
    private static StringBuilder image = jjimage;
    private static int jjimageLen;
    private static int lengthOfMatch;
    static protected int curChar;
}
