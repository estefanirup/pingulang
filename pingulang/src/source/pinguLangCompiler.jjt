/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = true;
}

PARSER_BEGIN(pingulangCompiler)
package source;
import recovery.*;
public class pingulangCompiler
{
  public static void main(String args[]) throws ParseException {
    pingulangCompiler parser = new pingulangCompiler(System.in);
    
    while (true)
    {
      System.out.println("Reading from standard input...");
      System.out.print("digite :");
      try
      {
        SimpleNode n = pingulangCompiler.Programa();
        n.dump("");
        //parser.Programa();
        //System.out.println("Analise concluida com sucesso! Programa valido.");
      }
      catch (ParseException e)
      {
            System.err.println("Erro de sintaxe:");
            System.err.println(e.getMessage());
      }
      catch (TokenMgrError e)
      {
            System.err.println("Erro léxico:");
            System.err.println(e.getMessage());
      }
  }
}
 static public String im(int x)
  {
    int k;
	String s;
    s = tokenImage[x];
    k = s.lastIndexOf("\"");
    try {
      s = s.substring(1,k);
    }
   catch (StringIndexOutOfBoundsException e)
	   {}
   return s;
  }
	
  static Token lastError = null;
  static boolean eof;    // variável que indica se EOF foi alcançado
	
  // o método abaixo consome tokens até alcançar um que pertença ao conjunto
  // de sincronização
  static void consumeUntil(RecoverySet g,
	                 ParseException e,
	                 String met) throws ParseEOFException,
	                                    ParseException
  {
	Token tok;
	System.out.println();
	System.out.println("*** " + met + " ***");
	System.out.println("     Conjunto de sincronização: " + g);
		
	if (g == null) throw e; // se o conjunto é null, propaga a exceção
	
	tok = getToken(1); // pega token corrente
	while ( ! eof )	{ // se não chegou ao fim do arquivo
	  if ( g.contains(tok.kind)) {//achou um token no conjunto
	    System.out.println("     Encontrado token de sincronização: " + 
	                       im(tok.kind));
	    break;
	  }
	  System.out.println("     Ignorando o token: " + im(tok.kind));
	  getNextToken();     // pega próximo token       
      tok = getToken(1);
	  if (tok.kind == EOF && ! g.contains(EOF) ) // fim da entrada?   
	      eof = true;
	}
    if ( tok != lastError)  {
	  System.out.println(e.getMessage());
	  lastError = tok;
	   
	}
	if ( eof )
	  throw new ParseEOFException("Encontrei EOF onde não deveria.");
  }
}

PARSER_END(pingulangCompiler)

SKIP : {
    < " " | "\t" | "\n" | "\r" >
  | < "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n") >
  | < "/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/" >
}


/* TOKENS PRINCIPAIS */
TOKEN : {
    < INICIO_PROGRAMA: "E LA VAMOS NOS" >
  | < FIM_PROGRAMA: "ISSO EH TUDO P-PESSOAL" >
  | < INICIO_BLOCO: "{" >
  | < FIM_BLOCO: "}" >
  | < PINGU: "PINGU" >
}

/* TIPOS DE DADOS */
TOKEN : {
    < INT_TYPE: "IO" >
  | < FLOAT_TYPE: "FLORZINHA" >
  | < BOOL_TYPE: "SID" >
  | < CHAR_TYPE: "PENELOPE CHARMOSA" >
  | < TRUE: "A GENTE VAI VIVER" >
  | < FALSE: "A GENTE VAI MORRER" >
}

/* ESTRUTURAS DE CONTROLE*/
TOKEN : {
    < IF: "SERIA" >
  | < ELSE: "OU SERA QUE NAO" >
  | < WHILE: "A EH REPETE" >
  | < FOR: "FORCA G" >
  | < DO: "YABBA DABBA DOO" >
}

/* FUNÇÕES E OPERADORES */
TOKEN : {
    < PRINT: "MOSTLA" >
  | < INPUT: "ESCLEVE" >
  | < OP_RELACIONAL: "==" | "!=" | ">" | "<" | ">=" | "<=" >
  | < OP_LOGICO: "&&" | "||" >
  | < OP_ARITMETICO: "+" | "-" | "*" | "/" | "%" >
  | < OP_IGUAL: "=" >
  | < OP_AUMENTO: "+=" >
  | < OP_DIMINUI: "-=" >
  | < OP_MULTIPLICA: "*=" >
  | < OP_DIVIDE: "/=" >
}

/* LITERAIS E IDENTIFICADORES */
TOKEN : {
    < INTEIRO: (["0"-"9"])+ >
  | < FLOAT: (["0"-"9"])+ "." (["0"-"9"])+ >
  | < CHAR: "'" (~["'","\\"] | "\\" ["n","t","b","r","f","\\","'","\""]) "'" >
  | < STRING: "\"" (~["\"","\\"] | "\\" ["n","t","b","r","f","\\","'","\""])* "\"" >
  | < ID: ["a"-"z"] (["a"-"z","A"-"Z","0"-"9","_"])* >
}

/* REGRAS GRAMATICAIS */
SimpleNode Programa() :
{RecoverySet g = Follow.Programa;}
{
  try {
    Inicio()
    ( Declaracao() )*
    ( Comando() )*
    Fim()
    {
	return jjtThis;
    }
      } catch(ParseException e) {
         consumeUntil(g,e,"Programa");
         }
    
}

void Declaracao() :
{RecoverySet g = Follow.Declaracao;}
{
  try {
    (
      TipoInt() | TipoFloat() | TipoBool() | TipoChar()
    )
    ListaVariaveis()
    FimLinha()
      } catch (ParseException e) {
         consumeUntil(g,e,"Declaracao");
         }
}

void ListaVariaveis() :
{RecoverySet g = Follow.ListaVariaveis;}
{
   try { 
    Identificador() ( ( Igual() | Aumento() | Diminui() | Multiplica() | Divide() ) Expressao() )?
    ( "," Identificador() ( ( Igual() | Aumento() | Diminui() | Multiplica() | Divide() ) Expressao() )? )*
    } catch (ParseException e) {
         consumeUntil(g,e,"ListaVariaveis");
         }
}


void Variavel() :
{RecoverySet g = Follow.Variavel;}
{
  try { 
    Identificador()
    (
        ( Igual() | Aumento() | Diminui() | Multiplica() | Divide() )
        Expressao()
    )?
  } catch (ParseException e) {
         consumeUntil(g,e,"Variavel");
         }
}


/* REGRAS DE COMANDOS */
void Comando() :
{RecoverySet g = Follow.Comando;}
{
  try { 
    LOOKAHEAD(2)
    Condicional()
    |
    Repeticao()
    |
    Atribuicao()  FimLinha()
    |
    EntradaSaida() FimLinha()
    |
    Bloco()
  } catch (ParseException e) {
         consumeUntil(g,e,"Comando");
         }
}

/* ATRIBUIÇÕES */
void Atribuicao() :
{RecoverySet g = Follow.Atribuicao;}
{
  try { 
    Identificador() 
    (
        Igual() Expressao()
        |
        ( Aumento() | Diminui() | Multiplica() | Divide() ) Expressao()
    )
  } catch (ParseException e) {
         consumeUntil(g,e,"Atribuicao");
         }
}

/* ESTRUTURAS CONDICIONAIS */
void Condicional() :
{RecoverySet g = Follow.Condicional;}
{
  try { 
    If() "(" Expressao() ")" Comando()
    [ LOOKAHEAD(2) Else() Comando() ]
  } catch (ParseException e) {
         consumeUntil(g,e,"Condicional");
         }
}

/* ESTRUTURAS DE REPETIÇÃO */
void Repeticao() :
{RecoverySet g = Follow.Repeticao;}
{ try { 
    While() | For() | DoWhile()
  } catch (ParseException e) {
         consumeUntil(g,e,"Repeticao");
         }
}

void While() :
{RecoverySet g = Follow.While;}
{
  try { 
    While_Token() "(" Expressao() ")" Comando()
  } catch (ParseException e) {
         consumeUntil(g,e,"While");
         }
}

void For() :
{RecoverySet g = Follow.For;}
{
  try { 
    For_Token() "("
      Atribuicao()
    "," Expressao()
    "," Atribuicao()
    ")" Comando()
  } catch (ParseException e) {
         consumeUntil(g,e,"For");
         }
}

void DoWhile() :
{RecoverySet g = Follow.DoWhile;}
{
  try { 
    Do() Comando() While() "(" Expressao() ")" FimLinha()
  } catch (ParseException e) {
         consumeUntil(g,e,"DoWhile");
         }
}

/* ENTRADA/SAÍDA */
void EntradaSaida() :
{RecoverySet g = Follow.EntradaSaida;}
{
  try { 
    Print() "(" Expressao() ")" 
    | Input() "(" Identificador() ")"
  } catch (ParseException e) {
         consumeUntil(g,e,"EntradaSaida");
         }
}

/* BLOCOS */
void Bloco() :
{RecoverySet g = Follow.Bloco;}
{
  try { 
    InicioBloco() ( Comando() )* FimBloco()
  } catch (ParseException e) {
         consumeUntil(g,e,"Bloco");
         }
}

/* EXPRESSÕES */
void Expressao() :
{RecoverySet g = Follow.Expressao;}
{
  try { 
    ExpressaoLogica()
  } catch (ParseException e) {
         consumeUntil(g,e,"Expressao");
         }
}

void ExpressaoLogica() :
{RecoverySet g = Follow.ExpressaoLogica;}
{
  try { 
    ExpressaoRelacional() ( OperadorLogico() ExpressaoRelacional() )*
  } catch (ParseException e) {
         consumeUntil(g,e,"ExpressaoLogica");
         }
}

void ExpressaoRelacional() :
{RecoverySet g = Follow.ExpressaoRelacional;}
{
  try { 
    ExpressaoAritmetica() ( OperadorRelacional() ExpressaoAritmetica() )*
  } catch (ParseException e) {
         consumeUntil(g,e,"ExpressaoRelacional");
         }
}

void ExpressaoAritmetica() :
{RecoverySet g = Follow.ExpressaoAritmetica;}
{
  try { 
    Termo() ( OperadorAritmetico() Termo() )*
  } catch (ParseException e) {
         consumeUntil(g,e,"ExpressaoAritmetica");
         }
}

void Termo() :
{RecoverySet g = Follow.Termo;}
{
  try { 
    Fator() ( OperadorAritmetico() Fator() )*
  } catch (ParseException e) {
         consumeUntil(g,e,"Termo");
         }
}

void Fator() :
{RecoverySet g = Follow.Fator;}
{
  try { 
    Identificador()
  | <INTEIRO>
  | <FLOAT>
  | <TRUE>
  | <FALSE>
  | <CHAR>
  | <STRING>
  | "(" Expressao() ")"
  | "!" Fator()
} catch (ParseException e) {
         consumeUntil(g,e,"Fator");
         } 
}

/* TERMINAIS */

//inicio e fim
void Inicio():
{}
{
  <INICIO_PROGRAMA>
}

void Fim():
{}
{
  <FIM_PROGRAMA>
}

//ID
void Identificador():
{}
{
  <ID>
}

//bloco
void InicioBloco():
{}
{
  <INICIO_BLOCO>
}

void FimBloco():
{}
{
  <FIM_BLOCO>
}

//variaveis
void TipoInt():
{}
{
  <INT_TYPE>
}

void TipoFloat():
{}
{
  <FLOAT_TYPE>
}

void TipoBool():
{}
{
  <BOOL_TYPE>
}

void TipoChar():
{}
{
  <CHAR_TYPE>
}

//operacoes
void Igual():
{}
{
  <OP_IGUAL>
}

void Aumento():
{}
{
  <OP_AUMENTO>
}

void Diminui():
{}
{
  <OP_DIMINUI>
}

void Multiplica():
{}
{
  <OP_MULTIPLICA>
}

void Divide():
{}
{
  <OP_DIVIDE>
}

void OperadorAritmetico():
{}
{
  <OP_ARITMETICO>
}

void OperadorLogico():
{}
{
  <OP_LOGICO>
}

void OperadorRelacional():
{}
{
  <OP_RELACIONAL>
}

//funcoes
void If():
{}
{
  <IF>
}

void Else():
{}
{
  <ELSE>
}

void Do():
{}
{
  <DO>
}

void While_Token():
{}
{
  <WHILE>
}

void For_Token():
{}
{
  <FOR>
}

//console
void Print():
{}
{
  <PRINT>
}

void Input():
{}
{
  <INPUT>
}

//fim de linha
void FimLinha():
{}
{
  <PINGU>
}